
Doniczka_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000126a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000102  00800060  0000126a  000012fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  00800162  00800162  00001400  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004e7  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a55  00000000  00000000  00001a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c3e  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000151e  00000000  00000000  000040da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  000055f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dc  00000000  00000000  00005888  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000081c  00000000  00000000  00005d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00006580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3e       	cpi	r26, 0xE6	; 230
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 00 	call	0x182	; 0x182 <main>
      8a:	0c 94 33 09 	jmp	0x1266	; 0x1266 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_13>:
}


//obs³uga danych przychodz¹cych z aplikacji mobilnej
ISR (USART_RXC_vect)
{
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	cf 92       	push	r12
      9e:	df 92       	push	r13
      a0:	ef 92       	push	r14
      a2:	ff 92       	push	r15
      a4:	0f 93       	push	r16
      a6:	1f 93       	push	r17
      a8:	2f 93       	push	r18
      aa:	3f 93       	push	r19
      ac:	4f 93       	push	r20
      ae:	5f 93       	push	r21
      b0:	6f 93       	push	r22
      b2:	7f 93       	push	r23
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25
      b8:	af 93       	push	r26
      ba:	bf 93       	push	r27
      bc:	ef 93       	push	r30
      be:	ff 93       	push	r31

 USART_GetString(ramka);
      c0:	8e e9       	ldi	r24, 0x9E	; 158
      c2:	91 e0       	ldi	r25, 0x01	; 1
      c4:	0e 94 ed 05 	call	0xbda	; 0xbda <USART_GetString>

 j=0;
      c8:	10 92 63 01 	sts	0x0163, r1
      cc:	10 92 62 01 	sts	0x0162, r1

 p = strtok(ramka, "^");
      d0:	8e e9       	ldi	r24, 0x9E	; 158
      d2:	91 e0       	ldi	r25, 0x01	; 1
      d4:	17 c0       	rjmp	.+46     	; 0x104 <__vector_13+0x72>
     while (p != NULL)
     {
         strcpy(wynik[j++],p);
      d6:	20 91 62 01 	lds	r18, 0x0162
      da:	30 91 63 01 	lds	r19, 0x0163
      de:	2f 5f       	subi	r18, 0xFF	; 255
      e0:	3f 4f       	sbci	r19, 0xFF	; 255
      e2:	30 93 63 01 	sts	0x0163, r19
      e6:	20 93 62 01 	sts	0x0162, r18
      ea:	21 50       	subi	r18, 0x01	; 1
      ec:	30 40       	sbci	r19, 0x00	; 0
      ee:	c9 01       	movw	r24, r18
      f0:	88 0f       	add	r24, r24
      f2:	99 1f       	adc	r25, r25
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	85 59       	subi	r24, 0x95	; 149
      fa:	9e 4f       	sbci	r25, 0xFE	; 254
      fc:	0e 94 cc 08 	call	0x1198	; 0x1198 <strcpy>
         p = strtok(NULL, "^");
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	60 e6       	ldi	r22, 0x60	; 96
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	0e 94 c7 08 	call	0x118e	; 0x118e <strtok>
     10c:	90 93 6a 01 	sts	0x016A, r25
     110:	80 93 69 01 	sts	0x0169, r24
 USART_GetString(ramka);

 j=0;

 p = strtok(ramka, "^");
     while (p != NULL)
     114:	60 91 69 01 	lds	r22, 0x0169
     118:	70 91 6a 01 	lds	r23, 0x016A
     11c:	61 15       	cp	r22, r1
     11e:	71 05       	cpc	r23, r1
     120:	d1 f6       	brne	.-76     	; 0xd6 <__vector_13+0x44>
         p = strtok(NULL, "^");
     }

 //prodedura zapisu danych do zewnêtrznej pamiêci
 int aabuf, bbbuf, ccbuf, ddbuf;
 aabuf=atoi(wynik[0]);
     122:	8b e6       	ldi	r24, 0x6B	; 107
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 a9 08 	call	0x1152	; 0x1152 <atoi>
     12a:	6c 01       	movw	r12, r24
 bbbuf=atoi(wynik[1]);
     12c:	8e e6       	ldi	r24, 0x6E	; 110
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	0e 94 a9 08 	call	0x1152	; 0x1152 <atoi>
     134:	7c 01       	movw	r14, r24
 ccbuf=atoi(wynik[2]);
     136:	81 e7       	ldi	r24, 0x71	; 113
     138:	91 e0       	ldi	r25, 0x01	; 1
     13a:	0e 94 a9 08 	call	0x1152	; 0x1152 <atoi>
     13e:	8c 01       	movw	r16, r24
 ddbuf=atoi(wynik[3]);
     140:	84 e7       	ldi	r24, 0x74	; 116
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	0e 94 a9 08 	call	0x1152	; 0x1152 <atoi>
     148:	9c 01       	movw	r18, r24

 RTC_SaveOptions(aabuf,bbbuf,ccbuf,ddbuf);
     14a:	c6 01       	movw	r24, r12
     14c:	b7 01       	movw	r22, r14
     14e:	a8 01       	movw	r20, r16
     150:	0e 94 77 04 	call	0x8ee	; 0x8ee <RTC_SaveOptions>
}
     154:	ff 91       	pop	r31
     156:	ef 91       	pop	r30
     158:	bf 91       	pop	r27
     15a:	af 91       	pop	r26
     15c:	9f 91       	pop	r25
     15e:	8f 91       	pop	r24
     160:	7f 91       	pop	r23
     162:	6f 91       	pop	r22
     164:	5f 91       	pop	r21
     166:	4f 91       	pop	r20
     168:	3f 91       	pop	r19
     16a:	2f 91       	pop	r18
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	0f 90       	pop	r0
     17a:	0f be       	out	0x3f, r0	; 63
     17c:	0f 90       	pop	r0
     17e:	1f 90       	pop	r1
     180:	18 95       	reti

00000182 <main>:
int dzien_buf;



int main(void)
{
     182:	af 92       	push	r10
     184:	bf 92       	push	r11
     186:	cf 92       	push	r12
     188:	df 92       	push	r13
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
DDRD |= (RxD_ON | TxD_ON);    // konfiguracja Uart
     196:	81 b3       	in	r24, 0x11	; 17
     198:	83 60       	ori	r24, 0x03	; 3
     19a:	81 bb       	out	0x11, r24	; 17
USART_Init(BAUD(9600));
     19c:	88 e6       	ldi	r24, 0x68	; 104
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 d0 05 	call	0xba0	; 0xba0 <USART_Init>

TWI_Init();    // konfiguracja TWI
     1a4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <TWI_Init>

ADC_Init();    // konfiguracja przetwornika ADC
     1a8:	0e 94 99 03 	call	0x732	; 0x732 <ADC_Init>



DDRD |= (1<<PD5); // piny, do których  pod³¹czona jest pompa
     1ac:	8d 9a       	sbi	0x11, 5	; 17
DDRD |= (1<<PD7);
     1ae:	8f 9a       	sbi	0x11, 7	; 17
PORTD &=~ (1<<PD7); 
     1b0:	97 98       	cbi	0x12, 7	; 18

// Konfiguracja TIMER1
TCCR1A |= (1<<WGM10);		// tryb Fast PWM 8-bit
     1b2:	8f b5       	in	r24, 0x2f	; 47
     1b4:	81 60       	ori	r24, 0x01	; 1
     1b6:	8f bd       	out	0x2f, r24	; 47
TCCR1B |= (1<<WGM12);
     1b8:	8e b5       	in	r24, 0x2e	; 46
     1ba:	88 60       	ori	r24, 0x08	; 8
     1bc:	8e bd       	out	0x2e, r24	; 46
TCCR1A |= ((1<<COM1A1)|(1<<COM1A0));
     1be:	8f b5       	in	r24, 0x2f	; 47
     1c0:	80 6c       	ori	r24, 0xC0	; 192
     1c2:	8f bd       	out	0x2f, r24	; 47
TCCR1B |= (1<<CS10);					// preskaler = 1
     1c4:	8e b5       	in	r24, 0x2e	; 46
     1c6:	81 60       	ori	r24, 0x01	; 1
     1c8:	8e bd       	out	0x2e, r24	; 46
OCR1A=127;
     1ca:	8f e7       	ldi	r24, 0x7F	; 127
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	9b bd       	out	0x2b, r25	; 43
     1d0:	8a bd       	out	0x2a, r24	; 42
	

DDRB &=~ PLYWAK_PIN;    // piny, do których pod³¹czony jest p³ywak
     1d2:	b8 98       	cbi	0x17, 0	; 23
PORTB |= PLYWAK_PIN;
     1d4:	c0 9a       	sbi	0x18, 0	; 24

sei(); //globalne zezwolenie na przerwanie 
     1d6:	78 94       	sei
UCSRB |= (1<<RXCIE); // zezwolenie na prerwanie gdy RX odbierze jakie dane 
     1d8:	57 9a       	sbi	0x0a, 7	; 10

DDRB &=~(1<<PB1);  //wejscie sygna³u STATE z modu³u Bluetooth
     1da:	b9 98       	cbi	0x17, 1	; 23

//------LAMKI SYGNALIZACYJNE-----------

DDRB |=(1<<PB2); // dioda sygnalizuj¹ca po³¹czenie urz¹dzenia z aplikacj¹ mobiln¹ 
     1dc:	ba 9a       	sbi	0x17, 2	; 23
PORTB |=(1<<PB2); 
     1de:	c2 9a       	sbi	0x18, 2	; 24

DDRB |=(1<<PB3); // dioda sygnalizuj¹ca pod³¹czenie zasilania urz¹dzenia 
     1e0:	bb 9a       	sbi	0x17, 3	; 23
PORTB &=~(1<<PB3);
     1e2:	c3 98       	cbi	0x18, 3	; 24

DDRB |=(1<<PB4); // dioda sygnalizuj¹ca brak wody w zbiorniku
     1e4:	bc 9a       	sbi	0x17, 4	; 23
PORTB |=(1<<PB4);
     1e6:	c4 9a       	sbi	0x18, 4	; 24

DDRB |=(1<<PB5); // dioda sygnalizuj¹ca potrzebê pod³¹czenia ³adowarki 
     1e8:	bd 9a       	sbi	0x17, 5	; 23
PORTB |=(1<<PB5);
     1ea:	c5 9a       	sbi	0x18, 5	; 24



// wczytanie ustawieñ z pamiêci zewnêtrznej
RTC_GetOptions();
     1ec:	0e 94 38 04 	call	0x870	; 0x870 <RTC_GetOptions>
itoa(aa,wynik[0],10);
     1f0:	80 91 8f 01 	lds	r24, 0x018F
     1f4:	90 91 90 01 	lds	r25, 0x0190
     1f8:	6b e6       	ldi	r22, 0x6B	; 107
     1fa:	71 e0       	ldi	r23, 0x01	; 1
     1fc:	4a e0       	ldi	r20, 0x0A	; 10
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>

itoa(bb,wynik[1],10);
     204:	80 91 8d 01 	lds	r24, 0x018D
     208:	90 91 8e 01 	lds	r25, 0x018E
     20c:	6e e6       	ldi	r22, 0x6E	; 110
     20e:	71 e0       	ldi	r23, 0x01	; 1
     210:	4a e0       	ldi	r20, 0x0A	; 10
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>

itoa(cc,wynik[2],10);
     218:	80 91 7a 01 	lds	r24, 0x017A
     21c:	90 91 7b 01 	lds	r25, 0x017B
     220:	61 e7       	ldi	r22, 0x71	; 113
     222:	71 e0       	ldi	r23, 0x01	; 1
     224:	4a e0       	ldi	r20, 0x0A	; 10
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>

itoa(dd,wynik[3],10);
     22c:	80 91 97 01 	lds	r24, 0x0197
     230:	90 91 98 01 	lds	r25, 0x0198
     234:	64 e7       	ldi	r22, 0x74	; 116
     236:	71 e0       	ldi	r23, 0x01	; 1
     238:	4a e0       	ldi	r20, 0x0A	; 10
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     240:	b0 e9       	ldi	r27, 0x90	; 144
     242:	eb 2e       	mov	r14, r27
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	fb 2e       	mov	r15, r27
//pomiar stanu baterii
ADC_pomiar(1); // odrzucam dwa pierwsze pomiary ze wzgledu na pojemnosc wejsciowa przetwornika
ADC_pomiar(1);
poz_bat = ADC_pomiar(1);  
  
bufor_w_g = 100 - (int) w_g;
     248:	a4 e6       	ldi	r26, 0x64	; 100
     24a:	ca 2e       	mov	r12, r26
     24c:	d1 2c       	mov	r13, r1
if (bufor_w_g >=100) bufor_w_g = 99;
     24e:	f3 e6       	ldi	r31, 0x63	; 99
     250:	af 2e       	mov	r10, r31
     252:	b1 2c       	mov	r11, r1
if (bufor_w_g <=0) bufor_w_g = 0;

// Pomiar poziomu wody w zbiorniku
if ( PLYWAK_DOWN)
   {
     p_w = 1;            // Ustawinie flagi braku wody na 1
     254:	01 e0       	ldi	r16, 0x01	; 1


while(1)
{
//sygna³ STATE z modu³u Bluetooth
if (PINB &(1<<PB1))
     256:	b1 99       	sbic	0x16, 1	; 22
{
PORTB &=~ (1<<PB2);
     258:	c2 98       	cbi	0x18, 2	; 24
}
if (!(PINB &(1<<PB1)))
     25a:	b1 9b       	sbis	0x16, 1	; 22
{
PORTB |= (1<<PB2);
     25c:	c2 9a       	sbi	0x18, 2	; 24
}


DHT11_pomiar(); //pomiar wilgotnoci i temperatury powietrza 
     25e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DHT11_pomiar>

//pomiar wilgotnoci gleby
ADC_pomiar(0); // odrzucam dwa pierwsze pomiary ze wzgledu na pojemnosc wejsciowa przetwornika
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 9e 03 	call	0x73c	; 0x73c <ADC_pomiar>
ADC_pomiar(0);
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 9e 03 	call	0x73c	; 0x73c <ADC_pomiar>
pomiar_w_g = ADC_pomiar(0); 
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 9e 03 	call	0x73c	; 0x73c <ADC_pomiar>
     27a:	90 93 95 01 	sts	0x0195, r25
     27e:	80 93 94 01 	sts	0x0194, r24
w_g = ((pomiar_w_g - 80)/6);
     282:	80 55       	subi	r24, 0x50	; 80
     284:	90 40       	sbci	r25, 0x00	; 0
     286:	66 e0       	ldi	r22, 0x06	; 6
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     28e:	88 27       	eor	r24, r24
     290:	77 fd       	sbrc	r23, 7
     292:	80 95       	com	r24
     294:	98 2f       	mov	r25, r24
     296:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__floatsisf>
     29a:	60 93 7c 01 	sts	0x017C, r22
     29e:	70 93 7d 01 	sts	0x017D, r23
     2a2:	80 93 7e 01 	sts	0x017E, r24
     2a6:	90 93 7f 01 	sts	0x017F, r25
     2aa:	88 ee       	ldi	r24, 0xE8	; 232
     2ac:	93 e0       	ldi	r25, 0x03	; 3
     2ae:	f7 01       	movw	r30, r14
     2b0:	31 97       	sbiw	r30, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x12e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b6:	d9 f7       	brne	.-10     	; 0x2ae <main+0x12c>
_delay_ms(100);

//pomiar stanu baterii
ADC_pomiar(1); // odrzucam dwa pierwsze pomiary ze wzgledu na pojemnosc wejsciowa przetwornika
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 9e 03 	call	0x73c	; 0x73c <ADC_pomiar>
ADC_pomiar(1);
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 9e 03 	call	0x73c	; 0x73c <ADC_pomiar>
poz_bat = ADC_pomiar(1);  
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 9e 03 	call	0x73c	; 0x73c <ADC_pomiar>
     2d0:	ec 01       	movw	r28, r24
     2d2:	90 93 84 01 	sts	0x0184, r25
     2d6:	80 93 83 01 	sts	0x0183, r24
  
bufor_w_g = 100 - (int) w_g;
     2da:	60 91 7c 01 	lds	r22, 0x017C
     2de:	70 91 7d 01 	lds	r23, 0x017D
     2e2:	80 91 7e 01 	lds	r24, 0x017E
     2e6:	90 91 7f 01 	lds	r25, 0x017F
     2ea:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fixsfsi>
     2ee:	c6 01       	movw	r24, r12
     2f0:	86 1b       	sub	r24, r22
     2f2:	97 0b       	sbc	r25, r23
     2f4:	90 93 d4 01 	sts	0x01D4, r25
     2f8:	80 93 d3 01 	sts	0x01D3, r24
if (bufor_w_g >=100) bufor_w_g = 99;
     2fc:	84 36       	cpi	r24, 0x64	; 100
     2fe:	91 05       	cpc	r25, r1
     300:	24 f0       	brlt	.+8      	; 0x30a <main+0x188>
     302:	b0 92 d4 01 	sts	0x01D4, r11
     306:	a0 92 d3 01 	sts	0x01D3, r10
if (bufor_w_g <=0) bufor_w_g = 0;
     30a:	80 91 d3 01 	lds	r24, 0x01D3
     30e:	90 91 d4 01 	lds	r25, 0x01D4
     312:	18 16       	cp	r1, r24
     314:	19 06       	cpc	r1, r25
     316:	24 f0       	brlt	.+8      	; 0x320 <main+0x19e>
     318:	10 92 d4 01 	sts	0x01D4, r1
     31c:	10 92 d3 01 	sts	0x01D3, r1

// Pomiar poziomu wody w zbiorniku
if ( PLYWAK_DOWN)
     320:	b0 99       	sbic	0x16, 0	; 22
     322:	04 c0       	rjmp	.+8      	; 0x32c <main+0x1aa>
   {
     p_w = 1;            // Ustawinie flagi braku wody na 1
     324:	00 93 80 01 	sts	0x0180, r16
	 PORTB &=~ (1<<PB4); // Za³¹czenie lamki sygnalizuj¹cej brak wody w zbiorniku
     328:	c4 98       	cbi	0x18, 4	; 24
     32a:	03 c0       	rjmp	.+6      	; 0x332 <main+0x1b0>
   }
   else
   {
     p_w = 0;            // Ustawinie flagi braku wody na 0
     32c:	10 92 80 01 	sts	0x0180, r1
	 PORTB |= (1<<PB4);  // Wy³¹czenie lamki sygnalizuj¹cej brak wody w zbiorniku
     330:	c4 9a       	sbi	0x18, 4	; 24
   }

if (poz_bat < 875)
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	cb 36       	cpi	r28, 0x6B	; 107
     336:	d8 07       	cpc	r29, r24
     338:	1c f4       	brge	.+6      	; 0x340 <main+0x1be>
   {
     p_b = 1;
     33a:	00 93 9a 01 	sts	0x019A, r16
	 PORTB &=~ (1<<PB5);
     33e:	c5 98       	cbi	0x18, 5	; 24
   }
if (poz_bat > 905)
     340:	ca 58       	subi	r28, 0x8A	; 138
     342:	d3 40       	sbci	r29, 0x03	; 3
     344:	1c f0       	brlt	.+6      	; 0x34c <main+0x1ca>
   {
     p_b = 0;
     346:	10 92 9a 01 	sts	0x019A, r1
	 PORTB |= (1<<PB5);
     34a:	c5 9a       	sbi	0x18, 5	; 24
   }


//zezwolenie czasowe
if (wynik[1][0]=='0')
     34c:	80 91 6e 01 	lds	r24, 0x016E
     350:	80 33       	cpi	r24, 0x30	; 48
     352:	21 f4       	brne	.+8      	; 0x35c <main+0x1da>
{
czas_p_p=0;
     354:	10 92 d9 01 	sts	0x01D9, r1
     358:	10 92 d8 01 	sts	0x01D8, r1
}
if (wynik[1][0]=='1')
     35c:	80 91 6e 01 	lds	r24, 0x016E
     360:	81 33       	cpi	r24, 0x31	; 49
     362:	31 f4       	brne	.+12     	; 0x370 <main+0x1ee>
{
czas_p_p=1;
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	90 93 d9 01 	sts	0x01D9, r25
     36c:	80 93 d8 01 	sts	0x01D8, r24
}
if (wynik[1][0]=='2')
     370:	80 91 6e 01 	lds	r24, 0x016E
     374:	82 33       	cpi	r24, 0x32	; 50
     376:	31 f4       	brne	.+12     	; 0x384 <main+0x202>
{
czas_p_p=2;
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	90 93 d9 01 	sts	0x01D9, r25
     380:	80 93 d8 01 	sts	0x01D8, r24
}
if (wynik[1][0]=='3')
     384:	80 91 6e 01 	lds	r24, 0x016E
     388:	83 33       	cpi	r24, 0x33	; 51
     38a:	31 f4       	brne	.+12     	; 0x398 <main+0x216>
{
czas_p_p=3;
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	90 93 d9 01 	sts	0x01D9, r25
     394:	80 93 d8 01 	sts	0x01D8, r24
}

RTC_GetTimeDate();
     398:	0e 94 9c 04 	call	0x938	; 0x938 <RTC_GetTimeDate>

dzien_buf = (((dzien>>4) * 10)+(dzien & 0b00001111));
     39c:	20 91 e4 01 	lds	r18, 0x01E4
     3a0:	30 91 e5 01 	lds	r19, 0x01E5
     3a4:	c9 01       	movw	r24, r18
     3a6:	e4 e0       	ldi	r30, 0x04	; 4
     3a8:	95 95       	asr	r25
     3aa:	87 95       	ror	r24
     3ac:	ea 95       	dec	r30
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <main+0x226>
     3b0:	ac 01       	movw	r20, r24
     3b2:	73 e0       	ldi	r23, 0x03	; 3
     3b4:	44 0f       	add	r20, r20
     3b6:	55 1f       	adc	r21, r21
     3b8:	7a 95       	dec	r23
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0x232>
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	48 0f       	add	r20, r24
     3c2:	59 1f       	adc	r21, r25
     3c4:	2f 70       	andi	r18, 0x0F	; 15
     3c6:	30 70       	andi	r19, 0x00	; 0
     3c8:	42 0f       	add	r20, r18
     3ca:	53 1f       	adc	r21, r19
     3cc:	50 93 67 01 	sts	0x0167, r21
     3d0:	40 93 66 01 	sts	0x0166, r20
if ((czas_p_p ==0) || ((czas_p_p != 0 )&&(dzien_buf>=czas_p_p)) || (miesiac>0) || (rok>0))
     3d4:	80 91 d8 01 	lds	r24, 0x01D8
     3d8:	90 91 d9 01 	lds	r25, 0x01D9
     3dc:	00 97       	sbiw	r24, 0x00	; 0
     3de:	89 f0       	breq	.+34     	; 0x402 <main+0x280>
     3e0:	48 17       	cp	r20, r24
     3e2:	59 07       	cpc	r21, r25
     3e4:	74 f4       	brge	.+28     	; 0x402 <main+0x280>
     3e6:	80 91 da 01 	lds	r24, 0x01DA
     3ea:	90 91 db 01 	lds	r25, 0x01DB
     3ee:	18 16       	cp	r1, r24
     3f0:	19 06       	cpc	r1, r25
     3f2:	3c f0       	brlt	.+14     	; 0x402 <main+0x280>
     3f4:	80 91 de 01 	lds	r24, 0x01DE
     3f8:	90 91 df 01 	lds	r25, 0x01DF
     3fc:	18 16       	cp	r1, r24
     3fe:	19 06       	cpc	r1, r25
     400:	3c f4       	brge	.+14     	; 0x410 <main+0x28e>
{
 zezwolenie_czasowe=1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	90 93 86 01 	sts	0x0186, r25
     40a:	80 93 85 01 	sts	0x0185, r24
     40e:	04 c0       	rjmp	.+8      	; 0x418 <main+0x296>
}
else 
{
zezwolenie_czasowe=0;
     410:	10 92 86 01 	sts	0x0186, r1
     414:	10 92 85 01 	sts	0x0185, r1
}

RTC_GetOptions();
     418:	0e 94 38 04 	call	0x870	; 0x870 <RTC_GetOptions>
// Podlewanie automatyczne
if ((dd > bufor_w_g) &&( zezwolenie_czasowe==1) && (p_w == 0))   
     41c:	20 91 97 01 	lds	r18, 0x0197
     420:	30 91 98 01 	lds	r19, 0x0198
     424:	80 91 d3 01 	lds	r24, 0x01D3
     428:	90 91 d4 01 	lds	r25, 0x01D4
     42c:	82 17       	cp	r24, r18
     42e:	93 07       	cpc	r25, r19
     430:	0c f0       	brlt	.+2      	; 0x434 <main+0x2b2>
     432:	3d c0       	rjmp	.+122    	; 0x4ae <main+0x32c>
     434:	80 91 85 01 	lds	r24, 0x0185
     438:	90 91 86 01 	lds	r25, 0x0186
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	09 f0       	breq	.+2      	; 0x442 <main+0x2c0>
     440:	36 c0       	rjmp	.+108    	; 0x4ae <main+0x32c>
     442:	80 91 80 01 	lds	r24, 0x0180
     446:	88 23       	and	r24, r24
     448:	91 f5       	brne	.+100    	; 0x4ae <main+0x32c>
{
   
  
  PORTD |= (1<<PD7); // Za³¹czanie pompy
     44a:	97 9a       	sbi	0x12, 7	; 18
     44c:	80 e2       	ldi	r24, 0x20	; 32
     44e:	9e e4       	ldi	r25, 0x4E	; 78
     450:	f7 01       	movw	r30, r14
     452:	31 97       	sbiw	r30, 0x01	; 1
     454:	f1 f7       	brne	.-4      	; 0x452 <main+0x2d0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     456:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     458:	d9 f7       	brne	.-10     	; 0x450 <main+0x2ce>
  _delay_ms(2000);

  if (wynik[2][0] == '2')
     45a:	80 91 71 01 	lds	r24, 0x0171
     45e:	82 33       	cpi	r24, 0x32	; 50
     460:	39 f4       	brne	.+14     	; 0x470 <main+0x2ee>
     462:	80 e2       	ldi	r24, 0x20	; 32
     464:	9e e4       	ldi	r25, 0x4E	; 78
     466:	f7 01       	movw	r30, r14
     468:	31 97       	sbiw	r30, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <main+0x2e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     46c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     46e:	d9 f7       	brne	.-10     	; 0x466 <main+0x2e4>
  {
    _delay_ms(2000);
  }
  if (wynik[2][0] == '3')
     470:	80 91 71 01 	lds	r24, 0x0171
     474:	83 33       	cpi	r24, 0x33	; 51
     476:	39 f4       	brne	.+14     	; 0x486 <main+0x304>
     478:	80 e4       	ldi	r24, 0x40	; 64
     47a:	9c e9       	ldi	r25, 0x9C	; 156
     47c:	f7 01       	movw	r30, r14
     47e:	31 97       	sbiw	r30, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <main+0x2fc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     482:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     484:	d9 f7       	brne	.-10     	; 0x47c <main+0x2fa>
  {
    _delay_ms(4000);
  }

 
PORTD &=~ (1<<PD7);// Wy³¹czanie pompy
     486:	97 98       	cbi	0x12, 7	; 18

wynik[4][0] = '0';   // Wykasowanie zezwolenia czasowego      
     488:	80 e3       	ldi	r24, 0x30	; 48
     48a:	80 93 77 01 	sts	0x0177, r24
RTC_SetDate(0,0,0);  // Wyzerowanie up³ywu czasu od ostatniego podlania
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	0e 94 0a 05 	call	0xa14	; 0xa14 <RTC_SetDate>
RTC_SetTime(0,0,0);
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	0e 94 56 05 	call	0xaac	; 0xaac <RTC_SetTime>
}

// Podlewanie rêczne
if ((wynik[4][0] == '1') && (p_w == 0)) 
     4ae:	80 91 77 01 	lds	r24, 0x0177
     4b2:	81 33       	cpi	r24, 0x31	; 49
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <main+0x336>
     4b6:	36 c0       	rjmp	.+108    	; 0x524 <main+0x3a2>
     4b8:	80 91 80 01 	lds	r24, 0x0180
     4bc:	88 23       	and	r24, r24
     4be:	91 f5       	brne	.+100    	; 0x524 <main+0x3a2>
{
  
  PORTD |= (1<<PD7);
     4c0:	97 9a       	sbi	0x12, 7	; 18
     4c2:	80 e4       	ldi	r24, 0x40	; 64
     4c4:	9c e9       	ldi	r25, 0x9C	; 156
     4c6:	f7 01       	movw	r30, r14
     4c8:	31 97       	sbiw	r30, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <main+0x346>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ce:	d9 f7       	brne	.-10     	; 0x4c6 <main+0x344>
  _delay_ms(4000);

  if (wynik[2][0] == '2') 
     4d0:	80 91 71 01 	lds	r24, 0x0171
     4d4:	82 33       	cpi	r24, 0x32	; 50
     4d6:	39 f4       	brne	.+14     	; 0x4e6 <main+0x364>
     4d8:	80 e6       	ldi	r24, 0x60	; 96
     4da:	9d e6       	ldi	r25, 0x6D	; 109
     4dc:	f7 01       	movw	r30, r14
     4de:	31 97       	sbiw	r30, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <main+0x35c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4e4:	d9 f7       	brne	.-10     	; 0x4dc <main+0x35a>
  {
    _delay_ms(2800);
  }
  if (wynik[2][0] == '3')
     4e6:	80 91 71 01 	lds	r24, 0x0171
     4ea:	83 33       	cpi	r24, 0x33	; 51
     4ec:	39 f4       	brne	.+14     	; 0x4fc <main+0x37a>
     4ee:	80 e2       	ldi	r24, 0x20	; 32
     4f0:	9b ec       	ldi	r25, 0xCB	; 203
     4f2:	f7 01       	movw	r30, r14
     4f4:	31 97       	sbiw	r30, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <main+0x372>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4fa:	d9 f7       	brne	.-10     	; 0x4f2 <main+0x370>
  {
    _delay_ms(5200);
  }

PORTD &=~ (1<<PD7);
     4fc:	97 98       	cbi	0x12, 7	; 18
wynik[4][0] = '0';
     4fe:	80 e3       	ldi	r24, 0x30	; 48
     500:	80 93 77 01 	sts	0x0177, r24
RTC_SetDate(0,0,0);
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	0e 94 0a 05 	call	0xa14	; 0xa14 <RTC_SetDate>
RTC_SetTime(0,0,0);
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	0e 94 56 05 	call	0xaac	; 0xaac <RTC_SetTime>
}

//dane wysy³ane do aplikacji mobilnej
itoa(p_w,data,10);
     524:	80 91 80 01 	lds	r24, 0x0180
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	68 ea       	ldi	r22, 0xA8	; 168
     52c:	71 e0       	ldi	r23, 0x01	; 1
     52e:	4a e0       	ldi	r20, 0x0A	; 10
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>

*(data+1) = '^';
     536:	1e e5       	ldi	r17, 0x5E	; 94
     538:	10 93 a9 01 	sts	0x01A9, r17
itoa(p_b,data+2,10);
     53c:	80 91 9a 01 	lds	r24, 0x019A
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	6a ea       	ldi	r22, 0xAA	; 170
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	4a e0       	ldi	r20, 0x0A	; 10
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>

*(data+3)='^';
     54e:	10 93 ab 01 	sts	0x01AB, r17
if (T_CC < 10)
     552:	90 91 99 01 	lds	r25, 0x0199
     556:	9a 30       	cpi	r25, 0x0A	; 10
     558:	40 f4       	brcc	.+16     	; 0x56a <main+0x3e8>
  {
    *(data+4)=' ';
     55a:	80 e2       	ldi	r24, 0x20	; 32
     55c:	80 93 ac 01 	sts	0x01AC, r24
    itoa(T_CC,data+5,10);
     560:	89 2f       	mov	r24, r25
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	6d ea       	ldi	r22, 0xAD	; 173
     566:	71 e0       	ldi	r23, 0x01	; 1
     568:	04 c0       	rjmp	.+8      	; 0x572 <main+0x3f0>
  } 
else 
  {
    itoa(T_CC,data+4,10);
     56a:	89 2f       	mov	r24, r25
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	6c ea       	ldi	r22, 0xAC	; 172
     570:	71 e0       	ldi	r23, 0x01	; 1
     572:	4a e0       	ldi	r20, 0x0A	; 10
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>
  }
*(data+6)='^';
     57a:	1e e5       	ldi	r17, 0x5E	; 94
     57c:	10 93 ae 01 	sts	0x01AE, r17
itoa(W_CC,data+7,10);
     580:	80 91 91 01 	lds	r24, 0x0191
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	6f ea       	ldi	r22, 0xAF	; 175
     588:	71 e0       	ldi	r23, 0x01	; 1
     58a:	4a e0       	ldi	r20, 0x0A	; 10
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>

*(data+9)='^';
     592:	10 93 b1 01 	sts	0x01B1, r17
if (bufor_w_g < 10)
     596:	20 91 d3 01 	lds	r18, 0x01D3
     59a:	30 91 d4 01 	lds	r19, 0x01D4
     59e:	2a 30       	cpi	r18, 0x0A	; 10
     5a0:	31 05       	cpc	r19, r1
     5a2:	3c f4       	brge	.+14     	; 0x5b2 <main+0x430>
  {
    *(data+10)=' ';
     5a4:	80 e2       	ldi	r24, 0x20	; 32
     5a6:	80 93 b2 01 	sts	0x01B2, r24
    itoa(bufor_w_g,data+11,10);
     5aa:	c9 01       	movw	r24, r18
     5ac:	63 eb       	ldi	r22, 0xB3	; 179
     5ae:	71 e0       	ldi	r23, 0x01	; 1
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <main+0x436>
  }
else 
  {
    itoa(bufor_w_g,data+10,10);
     5b2:	c9 01       	movw	r24, r18
     5b4:	62 eb       	ldi	r22, 0xB2	; 178
     5b6:	71 e0       	ldi	r23, 0x01	; 1
     5b8:	4a e0       	ldi	r20, 0x0A	; 10
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>
  }

*(data+12)='^';
     5c0:	1e e5       	ldi	r17, 0x5E	; 94
     5c2:	10 93 b4 01 	sts	0x01B4, r17
*(data+13) = wynik[0][0];
     5c6:	80 91 6b 01 	lds	r24, 0x016B
     5ca:	80 93 b5 01 	sts	0x01B5, r24

*(data+14) = '^';
     5ce:	10 93 b6 01 	sts	0x01B6, r17
*(data+15) = wynik[1][0];
     5d2:	80 91 6e 01 	lds	r24, 0x016E
     5d6:	80 93 b7 01 	sts	0x01B7, r24

*(data+16) = '^';
     5da:	10 93 b8 01 	sts	0x01B8, r17
*(data+17) = wynik[2][0];
     5de:	80 91 71 01 	lds	r24, 0x0171
     5e2:	80 93 b9 01 	sts	0x01B9, r24

*(data+18) = '^';
     5e6:	10 93 ba 01 	sts	0x01BA, r17
itoa(dd,data+19,10);
     5ea:	80 91 97 01 	lds	r24, 0x0197
     5ee:	90 91 98 01 	lds	r25, 0x0198
     5f2:	6b eb       	ldi	r22, 0xBB	; 187
     5f4:	71 e0       	ldi	r23, 0x01	; 1
     5f6:	4a e0       	ldi	r20, 0x0A	; 10
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>

*(data+19) = wynik[3][0];
     5fe:	80 91 74 01 	lds	r24, 0x0174
     602:	80 93 bb 01 	sts	0x01BB, r24
*(data+20) = wynik[3][1];
     606:	80 91 75 01 	lds	r24, 0x0175
     60a:	80 93 bc 01 	sts	0x01BC, r24

*(data+21)='^';
     60e:	10 93 bd 01 	sts	0x01BD, r17
itoa(zezwolenie_czasowe,data+22,10);
     612:	80 91 85 01 	lds	r24, 0x0185
     616:	90 91 86 01 	lds	r25, 0x0186
     61a:	6e eb       	ldi	r22, 0xBE	; 190
     61c:	71 e0       	ldi	r23, 0x01	; 1
     61e:	4a e0       	ldi	r20, 0x0A	; 10
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>

*(data+23)='^';
     626:	10 93 bf 01 	sts	0x01BF, r17
if (minuta <= 9)
     62a:	20 91 92 01 	lds	r18, 0x0192
     62e:	30 91 93 01 	lds	r19, 0x0193
     632:	2a 30       	cpi	r18, 0x0A	; 10
     634:	31 05       	cpc	r19, r1
     636:	3c f4       	brge	.+14     	; 0x646 <main+0x4c4>
  {
    *(data+24)=' ';
     638:	80 e2       	ldi	r24, 0x20	; 32
     63a:	80 93 c0 01 	sts	0x01C0, r24
    itoa(minuta,data+25,16);
     63e:	c9 01       	movw	r24, r18
     640:	61 ec       	ldi	r22, 0xC1	; 193
     642:	71 e0       	ldi	r23, 0x01	; 1
     644:	03 c0       	rjmp	.+6      	; 0x64c <main+0x4ca>
  }
else 
  {
    itoa(minuta,data+24,16);
     646:	c9 01       	movw	r24, r18
     648:	60 ec       	ldi	r22, 0xC0	; 192
     64a:	71 e0       	ldi	r23, 0x01	; 1
     64c:	40 e1       	ldi	r20, 0x10	; 16
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>
  }

*(data+26)='^';
     654:	8e e5       	ldi	r24, 0x5E	; 94
     656:	80 93 c2 01 	sts	0x01C2, r24
if (godzina <= 9)
     65a:	20 91 dc 01 	lds	r18, 0x01DC
     65e:	30 91 dd 01 	lds	r19, 0x01DD
     662:	2a 30       	cpi	r18, 0x0A	; 10
     664:	31 05       	cpc	r19, r1
     666:	3c f4       	brge	.+14     	; 0x676 <main+0x4f4>
  {
    *(data+27)=' ';
     668:	80 e2       	ldi	r24, 0x20	; 32
     66a:	80 93 c3 01 	sts	0x01C3, r24
    itoa(godzina,data+28,16);
     66e:	c9 01       	movw	r24, r18
     670:	64 ec       	ldi	r22, 0xC4	; 196
     672:	71 e0       	ldi	r23, 0x01	; 1
     674:	03 c0       	rjmp	.+6      	; 0x67c <main+0x4fa>
  }
else 
  {
    itoa(godzina,data+27,16);
     676:	c9 01       	movw	r24, r18
     678:	63 ec       	ldi	r22, 0xC3	; 195
     67a:	71 e0       	ldi	r23, 0x01	; 1
     67c:	40 e1       	ldi	r20, 0x10	; 16
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>
  }

*(data+29)='^';
     684:	8e e5       	ldi	r24, 0x5E	; 94
     686:	80 93 c5 01 	sts	0x01C5, r24
if (dzien <= 9)
     68a:	20 91 e4 01 	lds	r18, 0x01E4
     68e:	30 91 e5 01 	lds	r19, 0x01E5
     692:	2a 30       	cpi	r18, 0x0A	; 10
     694:	31 05       	cpc	r19, r1
     696:	3c f4       	brge	.+14     	; 0x6a6 <main+0x524>
  {
    *(data+30)=' ';
     698:	80 e2       	ldi	r24, 0x20	; 32
     69a:	80 93 c6 01 	sts	0x01C6, r24
    itoa(dzien,data+31,16);
     69e:	c9 01       	movw	r24, r18
     6a0:	67 ec       	ldi	r22, 0xC7	; 199
     6a2:	71 e0       	ldi	r23, 0x01	; 1
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <main+0x52a>
  }
else 
  {
    itoa(dzien,data+30,16);
     6a6:	c9 01       	movw	r24, r18
     6a8:	66 ec       	ldi	r22, 0xC6	; 198
     6aa:	71 e0       	ldi	r23, 0x01	; 1
     6ac:	40 e1       	ldi	r20, 0x10	; 16
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>
  }

*(data+32)='^';
     6b4:	8e e5       	ldi	r24, 0x5E	; 94
     6b6:	80 93 c8 01 	sts	0x01C8, r24
if (miesiac <=9)
     6ba:	20 91 da 01 	lds	r18, 0x01DA
     6be:	30 91 db 01 	lds	r19, 0x01DB
     6c2:	2a 30       	cpi	r18, 0x0A	; 10
     6c4:	31 05       	cpc	r19, r1
     6c6:	4c f4       	brge	.+18     	; 0x6da <main+0x558>
  {
    *(data+33)=' ';
     6c8:	80 e2       	ldi	r24, 0x20	; 32
     6ca:	80 93 c9 01 	sts	0x01C9, r24
    itoa(miesiac,data+34,16);
     6ce:	c9 01       	movw	r24, r18
     6d0:	6a ec       	ldi	r22, 0xCA	; 202
     6d2:	71 e0       	ldi	r23, 0x01	; 1
     6d4:	40 e1       	ldi	r20, 0x10	; 16
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <main+0x562>
  }
else 
  {
    itoa(miesiac,data+33,10);
     6da:	c9 01       	movw	r24, r18
     6dc:	69 ec       	ldi	r22, 0xC9	; 201
     6de:	71 e0       	ldi	r23, 0x01	; 1
     6e0:	4a e0       	ldi	r20, 0x0A	; 10
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>
  }

*(data+35)='^';
     6e8:	1e e5       	ldi	r17, 0x5E	; 94
     6ea:	10 93 cb 01 	sts	0x01CB, r17
itoa(poz_bat,data+36,10);
     6ee:	80 91 83 01 	lds	r24, 0x0183
     6f2:	90 91 84 01 	lds	r25, 0x0184
     6f6:	6c ec       	ldi	r22, 0xCC	; 204
     6f8:	71 e0       	ldi	r23, 0x01	; 1
     6fa:	4a e0       	ldi	r20, 0x0A	; 10
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>
*(data+39)='^';
     702:	10 93 cf 01 	sts	0x01CF, r17
itoa(pomiar_w_g,data+40,10);
     706:	80 91 94 01 	lds	r24, 0x0194
     70a:	90 91 95 01 	lds	r25, 0x0195
     70e:	60 ed       	ldi	r22, 0xD0	; 208
     710:	71 e0       	ldi	r23, 0x01	; 1
     712:	4a e0       	ldi	r20, 0x0A	; 10
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <itoa>

USART_PutString(data);
     71a:	88 ea       	ldi	r24, 0xA8	; 168
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <USART_PutString>
     722:	88 e9       	ldi	r24, 0x98	; 152
     724:	9a e3       	ldi	r25, 0x3A	; 58
     726:	f7 01       	movw	r30, r14
     728:	31 97       	sbiw	r30, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <main+0x5a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     72c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     72e:	d9 f7       	brne	.-10     	; 0x726 <main+0x5a4>
     730:	92 cd       	rjmp	.-1244   	; 0x256 <main+0xd4>

00000732 <ADC_Init>:
#include "ADC.h"

// Funkcja do konfiguracji ADC
void ADC_Init(void)
{
  ADMUX |= (1<<REFS0);   //wybor napiecia odniesienia
     732:	3e 9a       	sbi	0x07, 6	; 7
  ADCSRA |= (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0); // wlaczenie ADC i wybor preskalera (64)
     734:	86 b1       	in	r24, 0x06	; 6
     736:	83 68       	ori	r24, 0x83	; 131
     738:	86 b9       	out	0x06, r24	; 6
}
     73a:	08 95       	ret

0000073c <ADC_pomiar>:
int ADC_pomiar(int kanal)
{
  
     
  
  ADMUX = (ADMUX & 0xF8) | kanal; // ustawienie kanalu ADC w rejestrze ADMUX
     73c:	97 b1       	in	r25, 0x07	; 7
     73e:	98 7f       	andi	r25, 0xF8	; 248
     740:	98 2b       	or	r25, r24
     742:	97 b9       	out	0x07, r25	; 7
  ADCSRA |= (1<<ADSC);            // start programu przez ustawienie bitu ADCS w rejestrze ADCSR
     744:	36 9a       	sbi	0x06, 6	; 6
  while (ADCSRA & (1<<ADSC));     // oczekiwanie na koniec programu (dopuki ADSR = 1)
     746:	36 99       	sbic	0x06, 6	; 6
     748:	fe cf       	rjmp	.-4      	; 0x746 <ADC_pomiar+0xa>
  return ADC;
     74a:	24 b1       	in	r18, 0x04	; 4
     74c:	35 b1       	in	r19, 0x05	; 5
}
     74e:	c9 01       	movw	r24, r18
     750:	08 95       	ret

00000752 <Request>:


// Funkcja realizuj¹ca wys³anie przez mikrokontroler impulsu staru/zapytania
void Request()				
{
	DDRD |= (1<<DHT11_PIN);
     752:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<DHT11_PIN);	// Ustawinie stanu niskiego
     754:	96 98       	cbi	0x12, 6	; 18
     756:	88 ec       	ldi	r24, 0xC8	; 200
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	20 e9       	ldi	r18, 0x90	; 144
     75c:	31 e0       	ldi	r19, 0x01	; 1
     75e:	f9 01       	movw	r30, r18
     760:	31 97       	sbiw	r30, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <Request+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     764:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     766:	d9 f7       	brne	.-10     	; 0x75e <Request+0xc>
	_delay_ms(20);			    // Odczekanie 20 ms
	PORTD |= (1<<DHT11_PIN);	// Ustawinie stanu wysokiego
     768:	96 9a       	sbi	0x12, 6	; 18
}
     76a:	08 95       	ret

0000076c <Response>:

// Funkcja odczytuj¹ca impuls odpowiedzi od czujnika DHT11
void Response()			
{
	DDRD &= ~(1<<DHT11_PIN);
     76c:	8e 98       	cbi	0x11, 6	; 17
	while(PIND & (1<<DHT11_PIN));
     76e:	86 99       	sbic	0x10, 6	; 16
     770:	fe cf       	rjmp	.-4      	; 0x76e <Response+0x2>
	while((PIND & (1<<DHT11_PIN))==0);
     772:	86 9b       	sbis	0x10, 6	; 16
     774:	fe cf       	rjmp	.-4      	; 0x772 <Response+0x6>
	while(PIND & (1<<DHT11_PIN));
     776:	86 99       	sbic	0x10, 6	; 16
     778:	fe cf       	rjmp	.-4      	; 0x776 <Response+0xa>
}
     77a:	08 95       	ret

0000077c <Receive_data>:

// Funkcja realizuj¹ca odbiór danych z czujnika DHT11
int Receive_data()			
{	
     77c:	80 91 9b 01 	lds	r24, 0x019B
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     784:	40 ea       	ldi	r20, 0xA0	; 160
	for (int q=0; q<8; q++)
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  // Sprawdzanie czy otrzymany bit jest 0 czy 1
     786:	86 9b       	sbis	0x10, 6	; 16
     788:	fe cf       	rjmp	.-4      	; 0x786 <Receive_data+0xa>
     78a:	94 2f       	mov	r25, r20
     78c:	9a 95       	dec	r25
     78e:	f1 f7       	brne	.-4      	; 0x78c <Receive_data+0x10>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))             // Jeli stan wysoki trwa d³u¿ej ni¿ 30 us
     790:	86 9b       	sbis	0x10, 6	; 16
     792:	03 c0       	rjmp	.+6      	; 0x79a <Receive_data+0x1e>
		c = (c<<1)|(0x01);	                  // to jest to logiczna 1
     794:	88 0f       	add	r24, r24
     796:	81 60       	ori	r24, 0x01	; 1
     798:	01 c0       	rjmp	.+2      	; 0x79c <Receive_data+0x20>
		else			                      // jesli nie to jest to logiczne 0
		c = (c<<1);
     79a:	88 0f       	add	r24, r24
		while(PIND & (1<<DHT11_PIN));
     79c:	86 99       	sbic	0x10, 6	; 16
     79e:	fe cf       	rjmp	.-4      	; 0x79c <Receive_data+0x20>
}

// Funkcja realizuj¹ca odbiór danych z czujnika DHT11
int Receive_data()			
{	
	for (int q=0; q<8; q++)
     7a0:	2f 5f       	subi	r18, 0xFF	; 255
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	28 30       	cpi	r18, 0x08	; 8
     7a6:	31 05       	cpc	r19, r1
     7a8:	71 f7       	brne	.-36     	; 0x786 <Receive_data+0xa>
     7aa:	80 93 9b 01 	sts	0x019B, r24
		else			                      // jesli nie to jest to logiczne 0
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	08 95       	ret

000007b2 <DHT11_pomiar>:


void DHT11_pomiar(void)
{
    Request();		        // wys³anie impulsu staru
     7b2:	0e 94 a9 03 	call	0x752	; 0x752 <Request>
	Response();		        // odbiór impulsu odpowiedzi od czujnika DHT11
     7b6:	0e 94 b6 03 	call	0x76c	; 0x76c <Response>
	W_CC=Receive_data();	// Zapis pierwszych 8 bitów do zmiennej W_CC
     7ba:	0e 94 be 03 	call	0x77c	; 0x77c <Receive_data>
     7be:	80 93 91 01 	sts	0x0191, r24
	W_CD=Receive_data();	// Zapis kolejnych 8 bitów do zmiennej W_CD 
     7c2:	0e 94 be 03 	call	0x77c	; 0x77c <Receive_data>
     7c6:	80 93 68 01 	sts	0x0168, r24
	T_CC=Receive_data();	// Zapis kolejnych 8 bitów do zmiennej T_CC
     7ca:	0e 94 be 03 	call	0x77c	; 0x77c <Receive_data>
     7ce:	80 93 99 01 	sts	0x0199, r24
	T_CD=Receive_data();	// Zapis kolejnych 8 bitów do zmiennej T_CD
     7d2:	0e 94 be 03 	call	0x77c	; 0x77c <Receive_data>
     7d6:	80 93 e1 01 	sts	0x01E1, r24
	CheckSum=Receive_data();// Zapis kolejnych 8 bitów do zmiennej CheckSum 
     7da:	0e 94 be 03 	call	0x77c	; 0x77c <Receive_data>
     7de:	80 93 d7 01 	sts	0x01D7, r24

}
     7e2:	08 95       	ret

000007e4 <RTC_GetSavedTime>:
}


void RTC_GetSavedTime(void)
{
TWI_Start();                                    
     7e4:	0e 94 a2 05 	call	0xb44	; 0xb44 <TWI_Start>
TWI_Write(0xD0);                                
     7e8:	80 ed       	ldi	r24, 0xD0	; 208
     7ea:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(SAVED_TIME_ADDRESS);                             
     7ee:	8c e0       	ldi	r24, 0x0C	; 12
     7f0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Start();                                   
     7f4:	0e 94 a2 05 	call	0xb44	; 0xb44 <TWI_Start>
TWI_Write(0xD1);                                
     7f8:	81 ed       	ldi	r24, 0xD1	; 209
     7fa:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>

for(i = 0; i < 8; i++)
     7fe:	10 92 96 01 	sts	0x0196, r1
     802:	2f c0       	rjmp	.+94     	; 0x862 <__stack+0x3>
  {
  B1 = TWI_Read((i==7)?NACK:ACK);               
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	97 30       	cpi	r25, 0x07	; 7
     808:	09 f0       	breq	.+2      	; 0x80c <RTC_GetSavedTime+0x28>
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	0e 94 c2 05 	call	0xb84	; 0xb84 <TWI_Read>
     810:	80 93 e0 01 	sts	0x01E0, r24
  if (i==0) m=B1;
     814:	90 91 96 01 	lds	r25, 0x0196
     818:	99 23       	and	r25, r25
     81a:	29 f4       	brne	.+10     	; 0x826 <RTC_GetSavedTime+0x42>
     81c:	80 93 e2 01 	sts	0x01E2, r24
     820:	10 92 e3 01 	sts	0x01E3, r1
     824:	1b c0       	rjmp	.+54     	; 0x85c <RTC_GetSavedTime+0x78>
  if (i==1) g=B1;
     826:	91 30       	cpi	r25, 0x01	; 1
     828:	29 f4       	brne	.+10     	; 0x834 <RTC_GetSavedTime+0x50>
     82a:	80 93 81 01 	sts	0x0181, r24
     82e:	10 92 82 01 	sts	0x0182, r1
     832:	14 c0       	rjmp	.+40     	; 0x85c <RTC_GetSavedTime+0x78>
  if (i==2) d=B1;
     834:	92 30       	cpi	r25, 0x02	; 2
     836:	29 f4       	brne	.+10     	; 0x842 <RTC_GetSavedTime+0x5e>
     838:	80 93 d5 01 	sts	0x01D5, r24
     83c:	10 92 d6 01 	sts	0x01D6, r1
     840:	0d c0       	rjmp	.+26     	; 0x85c <RTC_GetSavedTime+0x78>
  if (i==3) mi=B1;
     842:	93 30       	cpi	r25, 0x03	; 3
     844:	29 f4       	brne	.+10     	; 0x850 <RTC_GetSavedTime+0x6c>
     846:	80 93 9c 01 	sts	0x019C, r24
     84a:	10 92 9d 01 	sts	0x019D, r1
     84e:	06 c0       	rjmp	.+12     	; 0x85c <RTC_GetSavedTime+0x78>
  if (i==4) r=B1;
     850:	94 30       	cpi	r25, 0x04	; 4
     852:	21 f4       	brne	.+8      	; 0x85c <RTC_GetSavedTime+0x78>
     854:	80 93 8b 01 	sts	0x018B, r24
     858:	10 92 8c 01 	sts	0x018C, r1
TWI_Write(0xD0);                                
TWI_Write(SAVED_TIME_ADDRESS);                             
TWI_Start();                                   
TWI_Write(0xD1);                                

for(i = 0; i < 8; i++)
     85c:	9f 5f       	subi	r25, 0xFF	; 255
     85e:	90 93 96 01 	sts	0x0196, r25
     862:	90 91 96 01 	lds	r25, 0x0196
     866:	98 30       	cpi	r25, 0x08	; 8
     868:	68 f2       	brcs	.-102    	; 0x804 <RTC_GetSavedTime+0x20>
  if (i==3) mi=B1;
  if (i==4) r=B1;
  
  }

TWI_Stop();  
     86a:	0e 94 a8 05 	call	0xb50	; 0xb50 <TWI_Stop>
}
     86e:	08 95       	ret

00000870 <RTC_GetOptions>:
}

// Funkcja odczytu danych do pamiêci
void RTC_GetOptions(void)
{
  TWI_Start();               // Start komunikacji TWI
     870:	0e 94 a2 05 	call	0xb44	; 0xb44 <TWI_Start>
  TWI_Write(DS1307_ID);      // Po³¹czenie z modu³em zegara RTC
     874:	80 ed       	ldi	r24, 0xD0	; 208
     876:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
  TWI_Write(OPTION_ADDRESS); // Wybór pierwszego adresu komórki pamiêci, sk¹d maj¹ zostaæ odczytane dane
     87a:	88 e0       	ldi	r24, 0x08	; 8
     87c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
  TWI_Start();               // Powtórzenie startu komunikacji
     880:	0e 94 a2 05 	call	0xb44	; 0xb44 <TWI_Start>
  TWI_Write(0xD1);           // Uruchomienie konfiguracji odczytu danych
     884:	81 ed       	ldi	r24, 0xD1	; 209
     886:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>

  // Pêtla realizuj¹ca odczyt danych
  for(i = 0; i < 8; i++)
     88a:	10 92 96 01 	sts	0x0196, r1
     88e:	28 c0       	rjmp	.+80     	; 0x8e0 <RTC_GetOptions+0x70>
  {
    B1 = TWI_Read((i==7)?NACK:ACK);               
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	97 30       	cpi	r25, 0x07	; 7
     894:	09 f0       	breq	.+2      	; 0x898 <RTC_GetOptions+0x28>
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	0e 94 c2 05 	call	0xb84	; 0xb84 <TWI_Read>
     89c:	80 93 e0 01 	sts	0x01E0, r24
    if (i==0) aa=B1;
     8a0:	90 91 96 01 	lds	r25, 0x0196
     8a4:	99 23       	and	r25, r25
     8a6:	29 f4       	brne	.+10     	; 0x8b2 <RTC_GetOptions+0x42>
     8a8:	80 93 8f 01 	sts	0x018F, r24
     8ac:	10 92 90 01 	sts	0x0190, r1
     8b0:	14 c0       	rjmp	.+40     	; 0x8da <RTC_GetOptions+0x6a>
    if (i==1) bb=B1;
     8b2:	91 30       	cpi	r25, 0x01	; 1
     8b4:	29 f4       	brne	.+10     	; 0x8c0 <RTC_GetOptions+0x50>
     8b6:	80 93 8d 01 	sts	0x018D, r24
     8ba:	10 92 8e 01 	sts	0x018E, r1
     8be:	0d c0       	rjmp	.+26     	; 0x8da <RTC_GetOptions+0x6a>
    if (i==2) cc=B1;
     8c0:	92 30       	cpi	r25, 0x02	; 2
     8c2:	29 f4       	brne	.+10     	; 0x8ce <RTC_GetOptions+0x5e>
     8c4:	80 93 7a 01 	sts	0x017A, r24
     8c8:	10 92 7b 01 	sts	0x017B, r1
     8cc:	06 c0       	rjmp	.+12     	; 0x8da <RTC_GetOptions+0x6a>
    if (i==3) dd=B1;
     8ce:	93 30       	cpi	r25, 0x03	; 3
     8d0:	21 f4       	brne	.+8      	; 0x8da <RTC_GetOptions+0x6a>
     8d2:	80 93 97 01 	sts	0x0197, r24
     8d6:	10 92 98 01 	sts	0x0198, r1
  TWI_Write(OPTION_ADDRESS); // Wybór pierwszego adresu komórki pamiêci, sk¹d maj¹ zostaæ odczytane dane
  TWI_Start();               // Powtórzenie startu komunikacji
  TWI_Write(0xD1);           // Uruchomienie konfiguracji odczytu danych

  // Pêtla realizuj¹ca odczyt danych
  for(i = 0; i < 8; i++)
     8da:	9f 5f       	subi	r25, 0xFF	; 255
     8dc:	90 93 96 01 	sts	0x0196, r25
     8e0:	90 91 96 01 	lds	r25, 0x0196
     8e4:	98 30       	cpi	r25, 0x08	; 8
     8e6:	a0 f2       	brcs	.-88     	; 0x890 <RTC_GetOptions+0x20>
    if (i==1) bb=B1;
    if (i==2) cc=B1;
    if (i==3) dd=B1;
  }

  TWI_Stop(); // Zakoñczenie komunikacji TWI  
     8e8:	0e 94 a8 05 	call	0xb50	; 0xb50 <TWI_Stop>
}
     8ec:	08 95       	ret

000008ee <RTC_SaveOptions>:
TWI_Stop();  
}

// Funkcja zapisu danych do pamiêci
int RTC_SaveOptions(int x, int y, int z, int u)
{
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	18 2f       	mov	r17, r24
     8f8:	06 2f       	mov	r16, r22
     8fa:	f4 2e       	mov	r15, r20
     8fc:	e2 2e       	mov	r14, r18
  TWI_Start();               // Start komunikacji TWI
     8fe:	0e 94 a2 05 	call	0xb44	; 0xb44 <TWI_Start>
 
  TWI_Write(DS1307_ID);	     // Po³¹czenie z modu³em zegara RTC 
     902:	80 ed       	ldi	r24, 0xD0	; 208
     904:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
  TWI_Write(OPTION_ADDRESS); // Wybór pierwszego adresu komórki pamiêci, gdzie maj¹ zostaæ zapisane dane
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
  
  //zapis danych do pamiêci (dane zapisywane s¹ w kolejnych komórkach pamiêci)
  TWI_Write(x);			
     90e:	81 2f       	mov	r24, r17
     910:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
  TWI_Write(y);			
     914:	80 2f       	mov	r24, r16
     916:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
  TWI_Write(z);
     91a:	8f 2d       	mov	r24, r15
     91c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
  TWI_Write(u);			
     920:	8e 2d       	mov	r24, r14
     922:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
 
  TWI_Stop();  // Zakoñczenie komunikacji TWI 
     926:	0e 94 a8 05 	call	0xb50	; 0xb50 <TWI_Stop>
  return 0;            	
}
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	08 95       	ret

00000938 <RTC_GetTimeDate>:
}


void RTC_GetTimeDate(void)
{
TWI_Start();                                    
     938:	0e 94 a2 05 	call	0xb44	; 0xb44 <TWI_Start>
TWI_Write(0xD0);                                
     93c:	80 ed       	ldi	r24, 0xD0	; 208
     93e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(0x00);                                
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Start();                                    
     948:	0e 94 a2 05 	call	0xb44	; 0xb44 <TWI_Start>
TWI_Write(0xD1);                               
     94c:	81 ed       	ldi	r24, 0xD1	; 209
     94e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>

for(i = 0; i < 8; i++)
     952:	10 92 96 01 	sts	0x0196, r1
     956:	36 c0       	rjmp	.+108    	; 0x9c4 <RTC_GetTimeDate+0x8c>
  {
  B1 = TWI_Read((i==7)?NACK:ACK);               
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	97 30       	cpi	r25, 0x07	; 7
     95c:	09 f0       	breq	.+2      	; 0x960 <RTC_GetTimeDate+0x28>
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	0e 94 c2 05 	call	0xb84	; 0xb84 <TWI_Read>
     964:	80 93 e0 01 	sts	0x01E0, r24
  if (i==0) sekunda=B1;
     968:	90 91 96 01 	lds	r25, 0x0196
     96c:	99 23       	and	r25, r25
     96e:	29 f4       	brne	.+10     	; 0x97a <RTC_GetTimeDate+0x42>
     970:	80 93 89 01 	sts	0x0189, r24
     974:	10 92 8a 01 	sts	0x018A, r1
     978:	22 c0       	rjmp	.+68     	; 0x9be <RTC_GetTimeDate+0x86>
  if (i==1) minuta=B1;
     97a:	91 30       	cpi	r25, 0x01	; 1
     97c:	29 f4       	brne	.+10     	; 0x988 <RTC_GetTimeDate+0x50>
     97e:	80 93 92 01 	sts	0x0192, r24
     982:	10 92 93 01 	sts	0x0193, r1
     986:	1b c0       	rjmp	.+54     	; 0x9be <RTC_GetTimeDate+0x86>
  if (i==2) godzina=B1;
     988:	92 30       	cpi	r25, 0x02	; 2
     98a:	29 f4       	brne	.+10     	; 0x996 <RTC_GetTimeDate+0x5e>
     98c:	80 93 dc 01 	sts	0x01DC, r24
     990:	10 92 dd 01 	sts	0x01DD, r1
     994:	14 c0       	rjmp	.+40     	; 0x9be <RTC_GetTimeDate+0x86>
  if (i==4) dzien=B1;
     996:	94 30       	cpi	r25, 0x04	; 4
     998:	29 f4       	brne	.+10     	; 0x9a4 <RTC_GetTimeDate+0x6c>
     99a:	80 93 e4 01 	sts	0x01E4, r24
     99e:	10 92 e5 01 	sts	0x01E5, r1
     9a2:	0d c0       	rjmp	.+26     	; 0x9be <RTC_GetTimeDate+0x86>
  if (i==5) miesiac=B1;
     9a4:	95 30       	cpi	r25, 0x05	; 5
     9a6:	29 f4       	brne	.+10     	; 0x9b2 <RTC_GetTimeDate+0x7a>
     9a8:	80 93 da 01 	sts	0x01DA, r24
     9ac:	10 92 db 01 	sts	0x01DB, r1
     9b0:	06 c0       	rjmp	.+12     	; 0x9be <RTC_GetTimeDate+0x86>
  if (i==6) rok=B1;
     9b2:	96 30       	cpi	r25, 0x06	; 6
     9b4:	21 f4       	brne	.+8      	; 0x9be <RTC_GetTimeDate+0x86>
     9b6:	80 93 de 01 	sts	0x01DE, r24
     9ba:	10 92 df 01 	sts	0x01DF, r1
TWI_Write(0xD0);                                
TWI_Write(0x00);                                
TWI_Start();                                    
TWI_Write(0xD1);                               

for(i = 0; i < 8; i++)
     9be:	9f 5f       	subi	r25, 0xFF	; 255
     9c0:	90 93 96 01 	sts	0x0196, r25
     9c4:	90 91 96 01 	lds	r25, 0x0196
     9c8:	98 30       	cpi	r25, 0x08	; 8
     9ca:	30 f2       	brcs	.-116    	; 0x958 <RTC_GetTimeDate+0x20>
  if (i==4) dzien=B1;
  if (i==5) miesiac=B1;
  if (i==6) rok=B1;
  }

TWI_Stop();  
     9cc:	0e 94 a8 05 	call	0xb50	; 0xb50 <TWI_Stop>
}
     9d0:	08 95       	ret

000009d2 <RTC_SaveTime>:
  TWI_Stop(); // Zakoñczenie komunikacji TWI  
}

void RTC_SaveTime(void)
{
RTC_GetTimeDate();
     9d2:	0e 94 9c 04 	call	0x938	; 0x938 <RTC_GetTimeDate>

TWI_Start();            // Start komunikacji TWI
     9d6:	0e 94 a2 05 	call	0xb44	; 0xb44 <TWI_Start>
 
TWI_Write(DS1307_ID);	 // po³¹czenie z modu³em zegara czasu rzeczywistego poprzez wys³anie jego adresu
     9da:	80 ed       	ldi	r24, 0xD0	; 208
     9dc:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(SAVED_TIME_ADDRESS); 
     9e0:	8c e0       	ldi	r24, 0x0C	; 12
     9e2:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
 
TWI_Write(minuta);
     9e6:	80 91 92 01 	lds	r24, 0x0192
     9ea:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(godzina);			
     9ee:	80 91 dc 01 	lds	r24, 0x01DC
     9f2:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(dzien);			
     9f6:	80 91 e4 01 	lds	r24, 0x01E4
     9fa:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(miesiac);
     9fe:	80 91 da 01 	lds	r24, 0x01DA
     a02:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(rok);				
     a06:	80 91 de 01 	lds	r24, 0x01DE
     a0a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
 
TWI_Stop();
     a0e:	0e 94 a8 05 	call	0xb50	; 0xb50 <TWI_Stop>
     

}
     a12:	08 95       	ret

00000a14 <RTC_SetDate>:
return 0;            	// zakoñczenie komunikacji TWI po dokaniu zmiany czasu
}


int RTC_SetDate(int dzien, int miesiac, int rok)
{
     a14:	cf 92       	push	r12
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	8c 01       	movw	r16, r24
     a22:	7b 01       	movw	r14, r22
     a24:	6a 01       	movw	r12, r20
TWI_Start();            // Start komunikacji TWI
     a26:	0e 94 a2 05 	call	0xb44	; 0xb44 <TWI_Start>
 
TWI_Write(DS1307_ID);	// po³¹czenie z modu³em zegara czasu rzeczywistego
     a2a:	80 ed       	ldi	r24, 0xD0	; 208
     a2c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(DATE_ADDRESS); // Wybór rejestru dni miesiaca
     a30:	84 e0       	ldi	r24, 0x04	; 4
     a32:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
 
TWI_Write(((dzien/10)<<4)+(dzien%10));			
     a36:	c8 01       	movw	r24, r16
     a38:	6a e0       	ldi	r22, 0x0A	; 10
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     a40:	26 2f       	mov	r18, r22
     a42:	22 95       	swap	r18
     a44:	20 7f       	andi	r18, 0xF0	; 240
     a46:	c8 01       	movw	r24, r16
     a48:	6a e0       	ldi	r22, 0x0A	; 10
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     a50:	82 0f       	add	r24, r18
     a52:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(((miesiac/10)<<4)+(miesiac%10));			
     a56:	c7 01       	movw	r24, r14
     a58:	6a e0       	ldi	r22, 0x0A	; 10
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     a60:	26 2f       	mov	r18, r22
     a62:	22 95       	swap	r18
     a64:	20 7f       	andi	r18, 0xF0	; 240
     a66:	c7 01       	movw	r24, r14
     a68:	6a e0       	ldi	r22, 0x0A	; 10
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     a70:	82 0f       	add	r24, r18
     a72:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(((rok/10)<<4)+(rok%10));			
     a76:	c6 01       	movw	r24, r12
     a78:	6a e0       	ldi	r22, 0x0A	; 10
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     a80:	26 2f       	mov	r18, r22
     a82:	22 95       	swap	r18
     a84:	20 7f       	andi	r18, 0xF0	; 240
     a86:	c6 01       	movw	r24, r12
     a88:	6a e0       	ldi	r22, 0x0A	; 10
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     a90:	82 0f       	add	r24, r18
     a92:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
 
TWI_Stop();
     a96:	0e 94 a8 05 	call	0xb50	; 0xb50 <TWI_Stop>
return 0;           	// zakoñczenie komunikacji TWI po dokaniu zmiany czasu
}
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <RTC_SetTime>:
#include "TWI.h"



int RTC_SetTime(int godz, int min, int sek)
{
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	6c 01       	movw	r12, r24
     aba:	7b 01       	movw	r14, r22
     abc:	8a 01       	movw	r16, r20
TWI_Start();            // Start komunikacji TWI
     abe:	0e 94 a2 05 	call	0xb44	; 0xb44 <TWI_Start>
 
TWI_Write(DS1307_ID);	 // po³¹czenie z modu³em zegara czasu rzeczywistego poprzez wys³anie jego adresu
     ac2:	80 ed       	ldi	r24, 0xD0	; 208
     ac4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(TIME_ADDRESS); // Wybór rejestru sekund
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
 
TWI_Write(((sek/10)<<4)+(sek%10));			
     ace:	c8 01       	movw	r24, r16
     ad0:	6a e0       	ldi	r22, 0x0A	; 10
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     ad8:	26 2f       	mov	r18, r22
     ada:	22 95       	swap	r18
     adc:	20 7f       	andi	r18, 0xF0	; 240
     ade:	c8 01       	movw	r24, r16
     ae0:	6a e0       	ldi	r22, 0x0A	; 10
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     ae8:	82 0f       	add	r24, r18
     aea:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(((min/10)<<4)+(min%10));			
     aee:	c7 01       	movw	r24, r14
     af0:	6a e0       	ldi	r22, 0x0A	; 10
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     af8:	26 2f       	mov	r18, r22
     afa:	22 95       	swap	r18
     afc:	20 7f       	andi	r18, 0xF0	; 240
     afe:	c7 01       	movw	r24, r14
     b00:	6a e0       	ldi	r22, 0x0A	; 10
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     b08:	82 0f       	add	r24, r18
     b0a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
TWI_Write(((godz/10)<<4)+(godz%10));			
     b0e:	c6 01       	movw	r24, r12
     b10:	6a e0       	ldi	r22, 0x0A	; 10
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     b18:	26 2f       	mov	r18, r22
     b1a:	22 95       	swap	r18
     b1c:	20 7f       	andi	r18, 0xF0	; 240
     b1e:	c6 01       	movw	r24, r12
     b20:	6a e0       	ldi	r22, 0x0A	; 10
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divmodhi4>
     b28:	82 0f       	add	r24, r18
     b2a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TWI_Write>
 
TWI_Stop();
     b2e:	0e 94 a8 05 	call	0xb50	; 0xb50 <TWI_Stop>
return 0;            	// zakoñczenie komunikacji TWI po dokaniu zmiany czasu
}
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	08 95       	ret

00000b44 <TWI_Start>:
#define DATA_ACK 28

// Funkcja generuj¹ca sygna³ startu komunikacji
void TWI_Start(void)
{
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     b44:	84 ea       	ldi	r24, 0xA4	; 164
     b46:	86 bf       	out	0x36, r24	; 54
  while (!(TWCR & (1<<TWINT)));
     b48:	06 b6       	in	r0, 0x36	; 54
     b4a:	07 fe       	sbrs	r0, 7
     b4c:	fd cf       	rjmp	.-6      	; 0xb48 <TWI_Start+0x4>
}
     b4e:	08 95       	ret

00000b50 <TWI_Stop>:

// Funkcja generuj¹ca sygna³ stopu komunikacji
void TWI_Stop(void)
{
  TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     b50:	84 e9       	ldi	r24, 0x94	; 148
     b52:	86 bf       	out	0x36, r24	; 54
  while ((TWCR & (1<<TWSTO)));
     b54:	06 b6       	in	r0, 0x36	; 54
     b56:	04 fc       	sbrc	r0, 4
     b58:	fd cf       	rjmp	.-6      	; 0xb54 <TWI_Stop+0x4>
}
     b5a:	08 95       	ret

00000b5c <TWI_Write>:

// Funkcja realizuj¹ca zapis danych do urz¹dzenia zewnêtrznego
char TWI_Write(char data)
{
  TWDR = data;
     b5c:	83 b9       	out	0x03, r24	; 3
  TWCR = (1<<TWINT) | (1<<TWEN);
     b5e:	84 e8       	ldi	r24, 0x84	; 132
     b60:	86 bf       	out	0x36, r24	; 54
  while (!(TWCR & (1<<TWINT)));
     b62:	06 b6       	in	r0, 0x36	; 54
     b64:	07 fe       	sbrs	r0, 7
     b66:	fd cf       	rjmp	.-6      	; 0xb62 <TWI_Write+0x6>
  if((TWSR == ADRW_ACK) | (TWSR == DATA_ACK))
     b68:	81 b1       	in	r24, 0x01	; 1
     b6a:	21 b1       	in	r18, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	82 31       	cpi	r24, 0x12	; 18
     b70:	09 f4       	brne	.+2      	; 0xb74 <TWI_Write+0x18>
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	2c 31       	cpi	r18, 0x1C	; 28
     b78:	09 f4       	brne	.+2      	; 0xb7c <TWI_Write+0x20>
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	98 2b       	or	r25, r24
    return 0;
  else
    return 1;
}
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	89 27       	eor	r24, r25
     b82:	08 95       	ret

00000b84 <TWI_Read>:

// Funkcja realizuj¹ca odczyt danych z urz¹dzenia zewnêtrznego
char TWI_Read(char ack)
{
  TWCR = ack 
     b84:	88 23       	and	r24, r24
     b86:	11 f4       	brne	.+4      	; 0xb8c <TWI_Read+0x8>
     b88:	84 e8       	ldi	r24, 0x84	; 132
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <TWI_Read+0xa>
     b8c:	84 ec       	ldi	r24, 0xC4	; 196
     b8e:	86 bf       	out	0x36, r24	; 54
	     ? ((1 << TWINT) | (1 << TWEN) | (1 << TWEA)) 
	     : ((1 << TWINT) | (1 << TWEN)) ;
  while (!(TWCR & (1<<TWINT)));
     b90:	06 b6       	in	r0, 0x36	; 54
     b92:	07 fe       	sbrs	r0, 7
     b94:	fd cf       	rjmp	.-6      	; 0xb90 <TWI_Read+0xc>
  return TWDR;
     b96:	83 b1       	in	r24, 0x03	; 3
}
     b98:	08 95       	ret

00000b9a <TWI_Init>:

// Funkcja inicjalizuj¹ca komunikacj¹ TWI
void TWI_Init(void)
{
  TWBR = 100;
     b9a:	84 e6       	ldi	r24, 0x64	; 100
     b9c:	80 b9       	out	0x00, r24	; 0
}
     b9e:	08 95       	ret

00000ba0 <USART_Init>:
#include <avr/io.h>

// Funkcja inicjalizuj¹ca interfejs USART
void USART_Init(int baud)       
{
  UBRRH = (unsigned char)(baud>>8);
     ba0:	29 2f       	mov	r18, r25
     ba2:	33 27       	eor	r19, r19
     ba4:	27 fd       	sbrc	r18, 7
     ba6:	3a 95       	dec	r19
     ba8:	20 bd       	out	0x20, r18	; 32
  UBRRL = (unsigned char)baud;
     baa:	89 b9       	out	0x09, r24	; 9
  UCSRB = (1<<RXEN)|(1<<TXEN);
     bac:	88 e1       	ldi	r24, 0x18	; 24
     bae:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<URSEL)|(3<<UCSZ0);
     bb0:	86 e8       	ldi	r24, 0x86	; 134
     bb2:	80 bd       	out	0x20, r24	; 32
}
     bb4:	08 95       	ret

00000bb6 <USART_PutChar>:

// Funkcja realizuj¹ca wys³anie pojedynczego znaku
void USART_PutChar(unsigned char data)  
{
  while (!(UCSRA & (1 << UDRE)));
     bb6:	5d 9b       	sbis	0x0b, 5	; 11
     bb8:	fe cf       	rjmp	.-4      	; 0xbb6 <USART_PutChar>
  UDR = data;
     bba:	8c b9       	out	0x0c, r24	; 12
}
     bbc:	08 95       	ret

00000bbe <USART_GetChar>:

// Funkcja realizuj¹ca odbiór pojedynczego znaku
unsigned char USART_GetChar(void)   
{
  while (!(UCSRA & (1 << RXC)));
     bbe:	5f 9b       	sbis	0x0b, 7	; 11
     bc0:	fe cf       	rjmp	.-4      	; 0xbbe <USART_GetChar>
  return UDR;
     bc2:	8c b1       	in	r24, 0x0c	; 12
}
     bc4:	08 95       	ret

00000bc6 <USART_PutString>:

// Funkcja realizuj¹ca wys³anie ci¹gu znaków
void USART_PutString(char * s)  
{
     bc6:	fc 01       	movw	r30, r24
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <USART_PutString+0xc>
}

// Funkcja realizuj¹ca wys³anie pojedynczego znaku
void USART_PutChar(unsigned char data)  
{
  while (!(UCSRA & (1 << UDRE)));
     bca:	5d 9b       	sbis	0x0b, 5	; 11
     bcc:	fe cf       	rjmp	.-4      	; 0xbca <USART_PutString+0x4>

// Funkcja realizuj¹ca wys³anie ci¹gu znaków
void USART_PutString(char * s)  
{
  while(*s)
	USART_PutChar(*s++);
     bce:	31 96       	adiw	r30, 0x01	; 1

// Funkcja realizuj¹ca wys³anie pojedynczego znaku
void USART_PutChar(unsigned char data)  
{
  while (!(UCSRA & (1 << UDRE)));
  UDR = data;
     bd0:	8c b9       	out	0x0c, r24	; 12
}

// Funkcja realizuj¹ca wys³anie ci¹gu znaków
void USART_PutString(char * s)  
{
  while(*s)
     bd2:	80 81       	ld	r24, Z
     bd4:	88 23       	and	r24, r24
     bd6:	c9 f7       	brne	.-14     	; 0xbca <USART_PutString+0x4>
	USART_PutChar(*s++);
}
     bd8:	08 95       	ret

00000bda <USART_GetString>:

// Funkcja realizuj¹ca odbiór ci¹gu znaków
void USART_GetString(char * s) 
{
     bda:	fc 01       	movw	r30, r24
}

// Funkcja realizuj¹ca odbiór pojedynczego znaku
unsigned char USART_GetChar(void)   
{
  while (!(UCSRA & (1 << RXC)));
     bdc:	5f 9b       	sbis	0x0b, 7	; 11
     bde:	fe cf       	rjmp	.-4      	; 0xbdc <USART_GetString+0x2>
  return UDR;
     be0:	8c b1       	in	r24, 0x0c	; 12
}

// Funkcja realizuj¹ca wys³anie pojedynczego znaku
void USART_PutChar(unsigned char data)  
{
  while (!(UCSRA & (1 << UDRE)));
     be2:	5d 9b       	sbis	0x0b, 5	; 11
     be4:	fe cf       	rjmp	.-4      	; 0xbe2 <USART_GetString+0x8>
  UDR = data;
     be6:	8c b9       	out	0x0c, r24	; 12
{
  char c;
  do{
    c = USART_GetChar();
    USART_PutChar(c);
    if(c=='\b')   // if backspace
     be8:	88 30       	cpi	r24, 0x08	; 8
     bea:	11 f4       	brne	.+4      	; 0xbf0 <USART_GetString+0x16>
      s--;
     bec:	31 97       	sbiw	r30, 0x01	; 1
     bee:	f6 cf       	rjmp	.-20     	; 0xbdc <USART_GetString+0x2>
    else     
      *s++ = c;
     bf0:	81 93       	st	Z+, r24
    if(c == '\n') // if CR
     bf2:	8a 30       	cpi	r24, 0x0A	; 10
     bf4:	99 f7       	brne	.-26     	; 0xbdc <USART_GetString+0x2>
      *s = 0;
     bf6:	10 82       	st	Z, r1
    }
  while(c != '\n');
}
     bf8:	08 95       	ret

00000bfa <__floatsisf>:
     bfa:	a8 e0       	ldi	r26, 0x08	; 8
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e3 e0       	ldi	r30, 0x03	; 3
     c00:	f6 e0       	ldi	r31, 0x06	; 6
     c02:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__prologue_saves__+0x12>
     c06:	9b 01       	movw	r18, r22
     c08:	ac 01       	movw	r20, r24
     c0a:	83 e0       	ldi	r24, 0x03	; 3
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	da 01       	movw	r26, r20
     c10:	c9 01       	movw	r24, r18
     c12:	88 27       	eor	r24, r24
     c14:	b7 fd       	sbrc	r27, 7
     c16:	83 95       	inc	r24
     c18:	99 27       	eor	r25, r25
     c1a:	aa 27       	eor	r26, r26
     c1c:	bb 27       	eor	r27, r27
     c1e:	b8 2e       	mov	r11, r24
     c20:	21 15       	cp	r18, r1
     c22:	31 05       	cpc	r19, r1
     c24:	41 05       	cpc	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	19 f4       	brne	.+6      	; 0xc30 <__floatsisf+0x36>
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	3a c0       	rjmp	.+116    	; 0xca4 <__floatsisf+0xaa>
     c30:	88 23       	and	r24, r24
     c32:	a9 f0       	breq	.+42     	; 0xc5e <__floatsisf+0x64>
     c34:	20 30       	cpi	r18, 0x00	; 0
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	38 07       	cpc	r19, r24
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	48 07       	cpc	r20, r24
     c3e:	80 e8       	ldi	r24, 0x80	; 128
     c40:	58 07       	cpc	r21, r24
     c42:	29 f4       	brne	.+10     	; 0xc4e <__floatsisf+0x54>
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	9f ec       	ldi	r25, 0xCF	; 207
     c4c:	30 c0       	rjmp	.+96     	; 0xcae <__floatsisf+0xb4>
     c4e:	ee 24       	eor	r14, r14
     c50:	ff 24       	eor	r15, r15
     c52:	87 01       	movw	r16, r14
     c54:	e2 1a       	sub	r14, r18
     c56:	f3 0a       	sbc	r15, r19
     c58:	04 0b       	sbc	r16, r20
     c5a:	15 0b       	sbc	r17, r21
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <__floatsisf+0x68>
     c5e:	79 01       	movw	r14, r18
     c60:	8a 01       	movw	r16, r20
     c62:	8e e1       	ldi	r24, 0x1E	; 30
     c64:	c8 2e       	mov	r12, r24
     c66:	d1 2c       	mov	r13, r1
     c68:	dc 82       	std	Y+4, r13	; 0x04
     c6a:	cb 82       	std	Y+3, r12	; 0x03
     c6c:	ed 82       	std	Y+5, r14	; 0x05
     c6e:	fe 82       	std	Y+6, r15	; 0x06
     c70:	0f 83       	std	Y+7, r16	; 0x07
     c72:	18 87       	std	Y+8, r17	; 0x08
     c74:	c8 01       	movw	r24, r16
     c76:	b7 01       	movw	r22, r14
     c78:	0e 94 af 06 	call	0xd5e	; 0xd5e <__clzsi2>
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	18 16       	cp	r1, r24
     c80:	19 06       	cpc	r1, r25
     c82:	84 f4       	brge	.+32     	; 0xca4 <__floatsisf+0xaa>
     c84:	08 2e       	mov	r0, r24
     c86:	04 c0       	rjmp	.+8      	; 0xc90 <__floatsisf+0x96>
     c88:	ee 0c       	add	r14, r14
     c8a:	ff 1c       	adc	r15, r15
     c8c:	00 1f       	adc	r16, r16
     c8e:	11 1f       	adc	r17, r17
     c90:	0a 94       	dec	r0
     c92:	d2 f7       	brpl	.-12     	; 0xc88 <__floatsisf+0x8e>
     c94:	ed 82       	std	Y+5, r14	; 0x05
     c96:	fe 82       	std	Y+6, r15	; 0x06
     c98:	0f 83       	std	Y+7, r16	; 0x07
     c9a:	18 87       	std	Y+8, r17	; 0x08
     c9c:	c8 1a       	sub	r12, r24
     c9e:	d9 0a       	sbc	r13, r25
     ca0:	dc 82       	std	Y+4, r13	; 0x04
     ca2:	cb 82       	std	Y+3, r12	; 0x03
     ca4:	ba 82       	std	Y+2, r11	; 0x02
     ca6:	ce 01       	movw	r24, r28
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__pack_f>
     cae:	28 96       	adiw	r28, 0x08	; 8
     cb0:	e9 e0       	ldi	r30, 0x09	; 9
     cb2:	0c 94 97 08 	jmp	0x112e	; 0x112e <__epilogue_restores__+0x12>

00000cb6 <__fixsfsi>:
     cb6:	ac e0       	ldi	r26, 0x0C	; 12
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e6       	ldi	r30, 0x61	; 97
     cbc:	f6 e0       	ldi	r31, 0x06	; 6
     cbe:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__prologue_saves__+0x20>
     cc2:	69 83       	std	Y+1, r22	; 0x01
     cc4:	7a 83       	std	Y+2, r23	; 0x02
     cc6:	8b 83       	std	Y+3, r24	; 0x03
     cc8:	9c 83       	std	Y+4, r25	; 0x04
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	be 01       	movw	r22, r28
     cd0:	6b 5f       	subi	r22, 0xFB	; 251
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__unpack_f>
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	61 f1       	breq	.+88     	; 0xd36 <__fixsfsi+0x80>
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	50 f1       	brcs	.+84     	; 0xd36 <__fixsfsi+0x80>
     ce2:	84 30       	cpi	r24, 0x04	; 4
     ce4:	21 f4       	brne	.+8      	; 0xcee <__fixsfsi+0x38>
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	88 23       	and	r24, r24
     cea:	51 f1       	breq	.+84     	; 0xd40 <__fixsfsi+0x8a>
     cec:	2e c0       	rjmp	.+92     	; 0xd4a <__fixsfsi+0x94>
     cee:	2f 81       	ldd	r18, Y+7	; 0x07
     cf0:	38 85       	ldd	r19, Y+8	; 0x08
     cf2:	37 fd       	sbrc	r19, 7
     cf4:	20 c0       	rjmp	.+64     	; 0xd36 <__fixsfsi+0x80>
     cf6:	6e 81       	ldd	r22, Y+6	; 0x06
     cf8:	2f 31       	cpi	r18, 0x1F	; 31
     cfa:	31 05       	cpc	r19, r1
     cfc:	1c f0       	brlt	.+6      	; 0xd04 <__fixsfsi+0x4e>
     cfe:	66 23       	and	r22, r22
     d00:	f9 f0       	breq	.+62     	; 0xd40 <__fixsfsi+0x8a>
     d02:	23 c0       	rjmp	.+70     	; 0xd4a <__fixsfsi+0x94>
     d04:	8e e1       	ldi	r24, 0x1E	; 30
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	82 1b       	sub	r24, r18
     d0a:	93 0b       	sbc	r25, r19
     d0c:	29 85       	ldd	r18, Y+9	; 0x09
     d0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d10:	4b 85       	ldd	r20, Y+11	; 0x0b
     d12:	5c 85       	ldd	r21, Y+12	; 0x0c
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <__fixsfsi+0x68>
     d16:	56 95       	lsr	r21
     d18:	47 95       	ror	r20
     d1a:	37 95       	ror	r19
     d1c:	27 95       	ror	r18
     d1e:	8a 95       	dec	r24
     d20:	d2 f7       	brpl	.-12     	; 0xd16 <__fixsfsi+0x60>
     d22:	66 23       	and	r22, r22
     d24:	b1 f0       	breq	.+44     	; 0xd52 <__fixsfsi+0x9c>
     d26:	50 95       	com	r21
     d28:	40 95       	com	r20
     d2a:	30 95       	com	r19
     d2c:	21 95       	neg	r18
     d2e:	3f 4f       	sbci	r19, 0xFF	; 255
     d30:	4f 4f       	sbci	r20, 0xFF	; 255
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
     d34:	0e c0       	rjmp	.+28     	; 0xd52 <__fixsfsi+0x9c>
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	09 c0       	rjmp	.+18     	; 0xd52 <__fixsfsi+0x9c>
     d40:	2f ef       	ldi	r18, 0xFF	; 255
     d42:	3f ef       	ldi	r19, 0xFF	; 255
     d44:	4f ef       	ldi	r20, 0xFF	; 255
     d46:	5f e7       	ldi	r21, 0x7F	; 127
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <__fixsfsi+0x9c>
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	50 e8       	ldi	r21, 0x80	; 128
     d52:	b9 01       	movw	r22, r18
     d54:	ca 01       	movw	r24, r20
     d56:	2c 96       	adiw	r28, 0x0c	; 12
     d58:	e2 e0       	ldi	r30, 0x02	; 2
     d5a:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__epilogue_restores__+0x20>

00000d5e <__clzsi2>:
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	7b 01       	movw	r14, r22
     d68:	8c 01       	movw	r16, r24
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	e8 16       	cp	r14, r24
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	f8 06       	cpc	r15, r24
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	08 07       	cpc	r16, r24
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	18 07       	cpc	r17, r24
     d7a:	88 f4       	brcc	.+34     	; 0xd9e <__clzsi2+0x40>
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	e8 16       	cp	r14, r24
     d80:	f1 04       	cpc	r15, r1
     d82:	01 05       	cpc	r16, r1
     d84:	11 05       	cpc	r17, r1
     d86:	31 f0       	breq	.+12     	; 0xd94 <__clzsi2+0x36>
     d88:	28 f0       	brcs	.+10     	; 0xd94 <__clzsi2+0x36>
     d8a:	88 e0       	ldi	r24, 0x08	; 8
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	a0 e0       	ldi	r26, 0x00	; 0
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	17 c0       	rjmp	.+46     	; 0xdc2 <__clzsi2+0x64>
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	12 c0       	rjmp	.+36     	; 0xdc2 <__clzsi2+0x64>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	e8 16       	cp	r14, r24
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	f8 06       	cpc	r15, r24
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 07       	cpc	r16, r24
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	18 07       	cpc	r17, r24
     dae:	28 f0       	brcs	.+10     	; 0xdba <__clzsi2+0x5c>
     db0:	88 e1       	ldi	r24, 0x18	; 24
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	a0 e0       	ldi	r26, 0x00	; 0
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	04 c0       	rjmp	.+8      	; 0xdc2 <__clzsi2+0x64>
     dba:	80 e1       	ldi	r24, 0x10	; 16
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a0 e0       	ldi	r26, 0x00	; 0
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	20 e2       	ldi	r18, 0x20	; 32
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	28 1b       	sub	r18, r24
     dcc:	39 0b       	sbc	r19, r25
     dce:	4a 0b       	sbc	r20, r26
     dd0:	5b 0b       	sbc	r21, r27
     dd2:	04 c0       	rjmp	.+8      	; 0xddc <__clzsi2+0x7e>
     dd4:	16 95       	lsr	r17
     dd6:	07 95       	ror	r16
     dd8:	f7 94       	ror	r15
     dda:	e7 94       	ror	r14
     ddc:	8a 95       	dec	r24
     dde:	d2 f7       	brpl	.-12     	; 0xdd4 <__clzsi2+0x76>
     de0:	f7 01       	movw	r30, r14
     de2:	ee 59       	subi	r30, 0x9E	; 158
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	80 81       	ld	r24, Z
     de8:	28 1b       	sub	r18, r24
     dea:	31 09       	sbc	r19, r1
     dec:	41 09       	sbc	r20, r1
     dee:	51 09       	sbc	r21, r1
     df0:	c9 01       	movw	r24, r18
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	08 95       	ret

00000dfc <__pack_f>:
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	fc 01       	movw	r30, r24
     e08:	e4 80       	ldd	r14, Z+4	; 0x04
     e0a:	f5 80       	ldd	r15, Z+5	; 0x05
     e0c:	06 81       	ldd	r16, Z+6	; 0x06
     e0e:	17 81       	ldd	r17, Z+7	; 0x07
     e10:	d1 80       	ldd	r13, Z+1	; 0x01
     e12:	80 81       	ld	r24, Z
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	48 f4       	brcc	.+18     	; 0xe2a <__pack_f+0x2e>
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	a0 e1       	ldi	r26, 0x10	; 16
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e8 2a       	or	r14, r24
     e22:	f9 2a       	or	r15, r25
     e24:	0a 2b       	or	r16, r26
     e26:	1b 2b       	or	r17, r27
     e28:	a5 c0       	rjmp	.+330    	; 0xf74 <__pack_f+0x178>
     e2a:	84 30       	cpi	r24, 0x04	; 4
     e2c:	09 f4       	brne	.+2      	; 0xe30 <__pack_f+0x34>
     e2e:	9f c0       	rjmp	.+318    	; 0xf6e <__pack_f+0x172>
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	21 f4       	brne	.+8      	; 0xe3c <__pack_f+0x40>
     e34:	ee 24       	eor	r14, r14
     e36:	ff 24       	eor	r15, r15
     e38:	87 01       	movw	r16, r14
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <__pack_f+0x4a>
     e3c:	e1 14       	cp	r14, r1
     e3e:	f1 04       	cpc	r15, r1
     e40:	01 05       	cpc	r16, r1
     e42:	11 05       	cpc	r17, r1
     e44:	19 f4       	brne	.+6      	; 0xe4c <__pack_f+0x50>
     e46:	e0 e0       	ldi	r30, 0x00	; 0
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	96 c0       	rjmp	.+300    	; 0xf78 <__pack_f+0x17c>
     e4c:	62 81       	ldd	r22, Z+2	; 0x02
     e4e:	73 81       	ldd	r23, Z+3	; 0x03
     e50:	9f ef       	ldi	r25, 0xFF	; 255
     e52:	62 38       	cpi	r22, 0x82	; 130
     e54:	79 07       	cpc	r23, r25
     e56:	0c f0       	brlt	.+2      	; 0xe5a <__pack_f+0x5e>
     e58:	5b c0       	rjmp	.+182    	; 0xf10 <__pack_f+0x114>
     e5a:	22 e8       	ldi	r18, 0x82	; 130
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	26 1b       	sub	r18, r22
     e60:	37 0b       	sbc	r19, r23
     e62:	2a 31       	cpi	r18, 0x1A	; 26
     e64:	31 05       	cpc	r19, r1
     e66:	2c f0       	brlt	.+10     	; 0xe72 <__pack_f+0x76>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	2a c0       	rjmp	.+84     	; 0xec6 <__pack_f+0xca>
     e72:	b8 01       	movw	r22, r16
     e74:	a7 01       	movw	r20, r14
     e76:	02 2e       	mov	r0, r18
     e78:	04 c0       	rjmp	.+8      	; 0xe82 <__pack_f+0x86>
     e7a:	76 95       	lsr	r23
     e7c:	67 95       	ror	r22
     e7e:	57 95       	ror	r21
     e80:	47 95       	ror	r20
     e82:	0a 94       	dec	r0
     e84:	d2 f7       	brpl	.-12     	; 0xe7a <__pack_f+0x7e>
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	a0 e0       	ldi	r26, 0x00	; 0
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	04 c0       	rjmp	.+8      	; 0xe98 <__pack_f+0x9c>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	aa 1f       	adc	r26, r26
     e96:	bb 1f       	adc	r27, r27
     e98:	2a 95       	dec	r18
     e9a:	d2 f7       	brpl	.-12     	; 0xe90 <__pack_f+0x94>
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	a1 09       	sbc	r26, r1
     ea0:	b1 09       	sbc	r27, r1
     ea2:	8e 21       	and	r24, r14
     ea4:	9f 21       	and	r25, r15
     ea6:	a0 23       	and	r26, r16
     ea8:	b1 23       	and	r27, r17
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	a1 05       	cpc	r26, r1
     eae:	b1 05       	cpc	r27, r1
     eb0:	21 f0       	breq	.+8      	; 0xeba <__pack_f+0xbe>
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a0 e0       	ldi	r26, 0x00	; 0
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	9a 01       	movw	r18, r20
     ebc:	ab 01       	movw	r20, r22
     ebe:	28 2b       	or	r18, r24
     ec0:	39 2b       	or	r19, r25
     ec2:	4a 2b       	or	r20, r26
     ec4:	5b 2b       	or	r21, r27
     ec6:	da 01       	movw	r26, r20
     ec8:	c9 01       	movw	r24, r18
     eca:	8f 77       	andi	r24, 0x7F	; 127
     ecc:	90 70       	andi	r25, 0x00	; 0
     ece:	a0 70       	andi	r26, 0x00	; 0
     ed0:	b0 70       	andi	r27, 0x00	; 0
     ed2:	80 34       	cpi	r24, 0x40	; 64
     ed4:	91 05       	cpc	r25, r1
     ed6:	a1 05       	cpc	r26, r1
     ed8:	b1 05       	cpc	r27, r1
     eda:	39 f4       	brne	.+14     	; 0xeea <__pack_f+0xee>
     edc:	27 ff       	sbrs	r18, 7
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <__pack_f+0xf6>
     ee0:	20 5c       	subi	r18, 0xC0	; 192
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	4f 4f       	sbci	r20, 0xFF	; 255
     ee6:	5f 4f       	sbci	r21, 0xFF	; 255
     ee8:	04 c0       	rjmp	.+8      	; 0xef2 <__pack_f+0xf6>
     eea:	21 5c       	subi	r18, 0xC1	; 193
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	4f 4f       	sbci	r20, 0xFF	; 255
     ef0:	5f 4f       	sbci	r21, 0xFF	; 255
     ef2:	e0 e0       	ldi	r30, 0x00	; 0
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	20 30       	cpi	r18, 0x00	; 0
     ef8:	a0 e0       	ldi	r26, 0x00	; 0
     efa:	3a 07       	cpc	r19, r26
     efc:	a0 e0       	ldi	r26, 0x00	; 0
     efe:	4a 07       	cpc	r20, r26
     f00:	a0 e4       	ldi	r26, 0x40	; 64
     f02:	5a 07       	cpc	r21, r26
     f04:	10 f0       	brcs	.+4      	; 0xf0a <__pack_f+0x10e>
     f06:	e1 e0       	ldi	r30, 0x01	; 1
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	79 01       	movw	r14, r18
     f0c:	8a 01       	movw	r16, r20
     f0e:	27 c0       	rjmp	.+78     	; 0xf5e <__pack_f+0x162>
     f10:	60 38       	cpi	r22, 0x80	; 128
     f12:	71 05       	cpc	r23, r1
     f14:	64 f5       	brge	.+88     	; 0xf6e <__pack_f+0x172>
     f16:	fb 01       	movw	r30, r22
     f18:	e1 58       	subi	r30, 0x81	; 129
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	d8 01       	movw	r26, r16
     f1e:	c7 01       	movw	r24, r14
     f20:	8f 77       	andi	r24, 0x7F	; 127
     f22:	90 70       	andi	r25, 0x00	; 0
     f24:	a0 70       	andi	r26, 0x00	; 0
     f26:	b0 70       	andi	r27, 0x00	; 0
     f28:	80 34       	cpi	r24, 0x40	; 64
     f2a:	91 05       	cpc	r25, r1
     f2c:	a1 05       	cpc	r26, r1
     f2e:	b1 05       	cpc	r27, r1
     f30:	39 f4       	brne	.+14     	; 0xf40 <__pack_f+0x144>
     f32:	e7 fe       	sbrs	r14, 7
     f34:	0d c0       	rjmp	.+26     	; 0xf50 <__pack_f+0x154>
     f36:	80 e4       	ldi	r24, 0x40	; 64
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <__pack_f+0x14c>
     f40:	8f e3       	ldi	r24, 0x3F	; 63
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a0 e0       	ldi	r26, 0x00	; 0
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e8 0e       	add	r14, r24
     f4a:	f9 1e       	adc	r15, r25
     f4c:	0a 1f       	adc	r16, r26
     f4e:	1b 1f       	adc	r17, r27
     f50:	17 ff       	sbrs	r17, 7
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <__pack_f+0x162>
     f54:	16 95       	lsr	r17
     f56:	07 95       	ror	r16
     f58:	f7 94       	ror	r15
     f5a:	e7 94       	ror	r14
     f5c:	31 96       	adiw	r30, 0x01	; 1
     f5e:	87 e0       	ldi	r24, 0x07	; 7
     f60:	16 95       	lsr	r17
     f62:	07 95       	ror	r16
     f64:	f7 94       	ror	r15
     f66:	e7 94       	ror	r14
     f68:	8a 95       	dec	r24
     f6a:	d1 f7       	brne	.-12     	; 0xf60 <__pack_f+0x164>
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <__pack_f+0x17c>
     f6e:	ee 24       	eor	r14, r14
     f70:	ff 24       	eor	r15, r15
     f72:	87 01       	movw	r16, r14
     f74:	ef ef       	ldi	r30, 0xFF	; 255
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	6e 2f       	mov	r22, r30
     f7a:	67 95       	ror	r22
     f7c:	66 27       	eor	r22, r22
     f7e:	67 95       	ror	r22
     f80:	90 2f       	mov	r25, r16
     f82:	9f 77       	andi	r25, 0x7F	; 127
     f84:	d7 94       	ror	r13
     f86:	dd 24       	eor	r13, r13
     f88:	d7 94       	ror	r13
     f8a:	8e 2f       	mov	r24, r30
     f8c:	86 95       	lsr	r24
     f8e:	49 2f       	mov	r20, r25
     f90:	46 2b       	or	r20, r22
     f92:	58 2f       	mov	r21, r24
     f94:	5d 29       	or	r21, r13
     f96:	b7 01       	movw	r22, r14
     f98:	ca 01       	movw	r24, r20
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	08 95       	ret

00000fa6 <__unpack_f>:
     fa6:	fc 01       	movw	r30, r24
     fa8:	db 01       	movw	r26, r22
     faa:	40 81       	ld	r20, Z
     fac:	51 81       	ldd	r21, Z+1	; 0x01
     fae:	22 81       	ldd	r18, Z+2	; 0x02
     fb0:	62 2f       	mov	r22, r18
     fb2:	6f 77       	andi	r22, 0x7F	; 127
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	22 1f       	adc	r18, r18
     fb8:	22 27       	eor	r18, r18
     fba:	22 1f       	adc	r18, r18
     fbc:	93 81       	ldd	r25, Z+3	; 0x03
     fbe:	89 2f       	mov	r24, r25
     fc0:	88 0f       	add	r24, r24
     fc2:	82 2b       	or	r24, r18
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	99 1f       	adc	r25, r25
     fca:	99 27       	eor	r25, r25
     fcc:	99 1f       	adc	r25, r25
     fce:	11 96       	adiw	r26, 0x01	; 1
     fd0:	9c 93       	st	X, r25
     fd2:	11 97       	sbiw	r26, 0x01	; 1
     fd4:	21 15       	cp	r18, r1
     fd6:	31 05       	cpc	r19, r1
     fd8:	a9 f5       	brne	.+106    	; 0x1044 <__unpack_f+0x9e>
     fda:	41 15       	cp	r20, r1
     fdc:	51 05       	cpc	r21, r1
     fde:	61 05       	cpc	r22, r1
     fe0:	71 05       	cpc	r23, r1
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <__unpack_f+0x42>
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	37 c0       	rjmp	.+110    	; 0x1056 <__unpack_f+0xb0>
     fe8:	82 e8       	ldi	r24, 0x82	; 130
     fea:	9f ef       	ldi	r25, 0xFF	; 255
     fec:	13 96       	adiw	r26, 0x03	; 3
     fee:	9c 93       	st	X, r25
     ff0:	8e 93       	st	-X, r24
     ff2:	12 97       	sbiw	r26, 0x02	; 2
     ff4:	9a 01       	movw	r18, r20
     ff6:	ab 01       	movw	r20, r22
     ff8:	67 e0       	ldi	r22, 0x07	; 7
     ffa:	22 0f       	add	r18, r18
     ffc:	33 1f       	adc	r19, r19
     ffe:	44 1f       	adc	r20, r20
    1000:	55 1f       	adc	r21, r21
    1002:	6a 95       	dec	r22
    1004:	d1 f7       	brne	.-12     	; 0xffa <__unpack_f+0x54>
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	8c 93       	st	X, r24
    100a:	0d c0       	rjmp	.+26     	; 0x1026 <__unpack_f+0x80>
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	44 1f       	adc	r20, r20
    1012:	55 1f       	adc	r21, r21
    1014:	12 96       	adiw	r26, 0x02	; 2
    1016:	8d 91       	ld	r24, X+
    1018:	9c 91       	ld	r25, X
    101a:	13 97       	sbiw	r26, 0x03	; 3
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	13 96       	adiw	r26, 0x03	; 3
    1020:	9c 93       	st	X, r25
    1022:	8e 93       	st	-X, r24
    1024:	12 97       	sbiw	r26, 0x02	; 2
    1026:	20 30       	cpi	r18, 0x00	; 0
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	38 07       	cpc	r19, r24
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	48 07       	cpc	r20, r24
    1030:	80 e4       	ldi	r24, 0x40	; 64
    1032:	58 07       	cpc	r21, r24
    1034:	58 f3       	brcs	.-42     	; 0x100c <__unpack_f+0x66>
    1036:	14 96       	adiw	r26, 0x04	; 4
    1038:	2d 93       	st	X+, r18
    103a:	3d 93       	st	X+, r19
    103c:	4d 93       	st	X+, r20
    103e:	5c 93       	st	X, r21
    1040:	17 97       	sbiw	r26, 0x07	; 7
    1042:	08 95       	ret
    1044:	2f 3f       	cpi	r18, 0xFF	; 255
    1046:	31 05       	cpc	r19, r1
    1048:	79 f4       	brne	.+30     	; 0x1068 <__unpack_f+0xc2>
    104a:	41 15       	cp	r20, r1
    104c:	51 05       	cpc	r21, r1
    104e:	61 05       	cpc	r22, r1
    1050:	71 05       	cpc	r23, r1
    1052:	19 f4       	brne	.+6      	; 0x105a <__unpack_f+0xb4>
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	8c 93       	st	X, r24
    1058:	08 95       	ret
    105a:	64 ff       	sbrs	r22, 4
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <__unpack_f+0xbe>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	8c 93       	st	X, r24
    1062:	12 c0       	rjmp	.+36     	; 0x1088 <__unpack_f+0xe2>
    1064:	1c 92       	st	X, r1
    1066:	10 c0       	rjmp	.+32     	; 0x1088 <__unpack_f+0xe2>
    1068:	2f 57       	subi	r18, 0x7F	; 127
    106a:	30 40       	sbci	r19, 0x00	; 0
    106c:	13 96       	adiw	r26, 0x03	; 3
    106e:	3c 93       	st	X, r19
    1070:	2e 93       	st	-X, r18
    1072:	12 97       	sbiw	r26, 0x02	; 2
    1074:	83 e0       	ldi	r24, 0x03	; 3
    1076:	8c 93       	st	X, r24
    1078:	87 e0       	ldi	r24, 0x07	; 7
    107a:	44 0f       	add	r20, r20
    107c:	55 1f       	adc	r21, r21
    107e:	66 1f       	adc	r22, r22
    1080:	77 1f       	adc	r23, r23
    1082:	8a 95       	dec	r24
    1084:	d1 f7       	brne	.-12     	; 0x107a <__unpack_f+0xd4>
    1086:	70 64       	ori	r23, 0x40	; 64
    1088:	14 96       	adiw	r26, 0x04	; 4
    108a:	4d 93       	st	X+, r20
    108c:	5d 93       	st	X+, r21
    108e:	6d 93       	st	X+, r22
    1090:	7c 93       	st	X, r23
    1092:	17 97       	sbiw	r26, 0x07	; 7
    1094:	08 95       	ret

00001096 <__divmodhi4>:
    1096:	97 fb       	bst	r25, 7
    1098:	09 2e       	mov	r0, r25
    109a:	07 26       	eor	r0, r23
    109c:	0a d0       	rcall	.+20     	; 0x10b2 <__divmodhi4_neg1>
    109e:	77 fd       	sbrc	r23, 7
    10a0:	04 d0       	rcall	.+8      	; 0x10aa <__divmodhi4_neg2>
    10a2:	0c d0       	rcall	.+24     	; 0x10bc <__udivmodhi4>
    10a4:	06 d0       	rcall	.+12     	; 0x10b2 <__divmodhi4_neg1>
    10a6:	00 20       	and	r0, r0
    10a8:	1a f4       	brpl	.+6      	; 0x10b0 <__divmodhi4_exit>

000010aa <__divmodhi4_neg2>:
    10aa:	70 95       	com	r23
    10ac:	61 95       	neg	r22
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255

000010b0 <__divmodhi4_exit>:
    10b0:	08 95       	ret

000010b2 <__divmodhi4_neg1>:
    10b2:	f6 f7       	brtc	.-4      	; 0x10b0 <__divmodhi4_exit>
    10b4:	90 95       	com	r25
    10b6:	81 95       	neg	r24
    10b8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ba:	08 95       	ret

000010bc <__udivmodhi4>:
    10bc:	aa 1b       	sub	r26, r26
    10be:	bb 1b       	sub	r27, r27
    10c0:	51 e1       	ldi	r21, 0x11	; 17
    10c2:	07 c0       	rjmp	.+14     	; 0x10d2 <__udivmodhi4_ep>

000010c4 <__udivmodhi4_loop>:
    10c4:	aa 1f       	adc	r26, r26
    10c6:	bb 1f       	adc	r27, r27
    10c8:	a6 17       	cp	r26, r22
    10ca:	b7 07       	cpc	r27, r23
    10cc:	10 f0       	brcs	.+4      	; 0x10d2 <__udivmodhi4_ep>
    10ce:	a6 1b       	sub	r26, r22
    10d0:	b7 0b       	sbc	r27, r23

000010d2 <__udivmodhi4_ep>:
    10d2:	88 1f       	adc	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	5a 95       	dec	r21
    10d8:	a9 f7       	brne	.-22     	; 0x10c4 <__udivmodhi4_loop>
    10da:	80 95       	com	r24
    10dc:	90 95       	com	r25
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	08 95       	ret

000010e4 <__prologue_saves__>:
    10e4:	2f 92       	push	r2
    10e6:	3f 92       	push	r3
    10e8:	4f 92       	push	r4
    10ea:	5f 92       	push	r5
    10ec:	6f 92       	push	r6
    10ee:	7f 92       	push	r7
    10f0:	8f 92       	push	r8
    10f2:	9f 92       	push	r9
    10f4:	af 92       	push	r10
    10f6:	bf 92       	push	r11
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	ca 1b       	sub	r28, r26
    110e:	db 0b       	sbc	r29, r27
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	09 94       	ijmp

0000111c <__epilogue_restores__>:
    111c:	2a 88       	ldd	r2, Y+18	; 0x12
    111e:	39 88       	ldd	r3, Y+17	; 0x11
    1120:	48 88       	ldd	r4, Y+16	; 0x10
    1122:	5f 84       	ldd	r5, Y+15	; 0x0f
    1124:	6e 84       	ldd	r6, Y+14	; 0x0e
    1126:	7d 84       	ldd	r7, Y+13	; 0x0d
    1128:	8c 84       	ldd	r8, Y+12	; 0x0c
    112a:	9b 84       	ldd	r9, Y+11	; 0x0b
    112c:	aa 84       	ldd	r10, Y+10	; 0x0a
    112e:	b9 84       	ldd	r11, Y+9	; 0x09
    1130:	c8 84       	ldd	r12, Y+8	; 0x08
    1132:	df 80       	ldd	r13, Y+7	; 0x07
    1134:	ee 80       	ldd	r14, Y+6	; 0x06
    1136:	fd 80       	ldd	r15, Y+5	; 0x05
    1138:	0c 81       	ldd	r16, Y+4	; 0x04
    113a:	1b 81       	ldd	r17, Y+3	; 0x03
    113c:	aa 81       	ldd	r26, Y+2	; 0x02
    113e:	b9 81       	ldd	r27, Y+1	; 0x01
    1140:	ce 0f       	add	r28, r30
    1142:	d1 1d       	adc	r29, r1
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	ed 01       	movw	r28, r26
    1150:	08 95       	ret

00001152 <atoi>:
    1152:	fc 01       	movw	r30, r24
    1154:	88 27       	eor	r24, r24
    1156:	99 27       	eor	r25, r25
    1158:	e8 94       	clt
    115a:	21 91       	ld	r18, Z+
    115c:	20 32       	cpi	r18, 0x20	; 32
    115e:	e9 f3       	breq	.-6      	; 0x115a <atoi+0x8>
    1160:	29 30       	cpi	r18, 0x09	; 9
    1162:	10 f0       	brcs	.+4      	; 0x1168 <atoi+0x16>
    1164:	2e 30       	cpi	r18, 0x0E	; 14
    1166:	c8 f3       	brcs	.-14     	; 0x115a <atoi+0x8>
    1168:	2b 32       	cpi	r18, 0x2B	; 43
    116a:	41 f0       	breq	.+16     	; 0x117c <atoi+0x2a>
    116c:	2d 32       	cpi	r18, 0x2D	; 45
    116e:	39 f4       	brne	.+14     	; 0x117e <atoi+0x2c>
    1170:	68 94       	set
    1172:	04 c0       	rjmp	.+8      	; 0x117c <atoi+0x2a>
    1174:	0e 94 1b 09 	call	0x1236	; 0x1236 <__mulhi_const_10>
    1178:	82 0f       	add	r24, r18
    117a:	91 1d       	adc	r25, r1
    117c:	21 91       	ld	r18, Z+
    117e:	20 53       	subi	r18, 0x30	; 48
    1180:	2a 30       	cpi	r18, 0x0A	; 10
    1182:	c0 f3       	brcs	.-16     	; 0x1174 <atoi+0x22>
    1184:	1e f4       	brtc	.+6      	; 0x118c <atoi+0x3a>
    1186:	90 95       	com	r25
    1188:	81 95       	neg	r24
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	08 95       	ret

0000118e <strtok>:
    118e:	44 e6       	ldi	r20, 0x64	; 100
    1190:	51 e0       	ldi	r21, 0x01	; 1
    1192:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <strtok_r>
    1196:	08 95       	ret

00001198 <strcpy>:
    1198:	fb 01       	movw	r30, r22
    119a:	dc 01       	movw	r26, r24
    119c:	01 90       	ld	r0, Z+
    119e:	0d 92       	st	X+, r0
    11a0:	00 20       	and	r0, r0
    11a2:	e1 f7       	brne	.-8      	; 0x119c <strcpy+0x4>
    11a4:	08 95       	ret

000011a6 <strtok_r>:
    11a6:	fa 01       	movw	r30, r20
    11a8:	a1 91       	ld	r26, Z+
    11aa:	b0 81       	ld	r27, Z
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	19 f4       	brne	.+6      	; 0x11b6 <strtok_r+0x10>
    11b0:	10 97       	sbiw	r26, 0x00	; 0
    11b2:	e1 f0       	breq	.+56     	; 0x11ec <strtok_r+0x46>
    11b4:	cd 01       	movw	r24, r26
    11b6:	dc 01       	movw	r26, r24
    11b8:	cd 01       	movw	r24, r26
    11ba:	0d 90       	ld	r0, X+
    11bc:	00 20       	and	r0, r0
    11be:	11 f4       	brne	.+4      	; 0x11c4 <strtok_r+0x1e>
    11c0:	c0 01       	movw	r24, r0
    11c2:	13 c0       	rjmp	.+38     	; 0x11ea <strtok_r+0x44>
    11c4:	fb 01       	movw	r30, r22
    11c6:	21 91       	ld	r18, Z+
    11c8:	22 23       	and	r18, r18
    11ca:	19 f0       	breq	.+6      	; 0x11d2 <strtok_r+0x2c>
    11cc:	20 15       	cp	r18, r0
    11ce:	d9 f7       	brne	.-10     	; 0x11c6 <strtok_r+0x20>
    11d0:	f3 cf       	rjmp	.-26     	; 0x11b8 <strtok_r+0x12>
    11d2:	fb 01       	movw	r30, r22
    11d4:	21 91       	ld	r18, Z+
    11d6:	20 15       	cp	r18, r0
    11d8:	19 f4       	brne	.+6      	; 0x11e0 <strtok_r+0x3a>
    11da:	1e 92       	st	-X, r1
    11dc:	11 96       	adiw	r26, 0x01	; 1
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <strtok_r+0x46>
    11e0:	22 23       	and	r18, r18
    11e2:	c1 f7       	brne	.-16     	; 0x11d4 <strtok_r+0x2e>
    11e4:	0d 90       	ld	r0, X+
    11e6:	00 20       	and	r0, r0
    11e8:	a1 f7       	brne	.-24     	; 0x11d2 <strtok_r+0x2c>
    11ea:	d0 01       	movw	r26, r0
    11ec:	fa 01       	movw	r30, r20
    11ee:	a1 93       	st	Z+, r26
    11f0:	b0 83       	st	Z, r27
    11f2:	08 95       	ret

000011f4 <itoa>:
    11f4:	fb 01       	movw	r30, r22
    11f6:	9f 01       	movw	r18, r30
    11f8:	e8 94       	clt
    11fa:	42 30       	cpi	r20, 0x02	; 2
    11fc:	c4 f0       	brlt	.+48     	; 0x122e <itoa+0x3a>
    11fe:	45 32       	cpi	r20, 0x25	; 37
    1200:	b4 f4       	brge	.+44     	; 0x122e <itoa+0x3a>
    1202:	4a 30       	cpi	r20, 0x0A	; 10
    1204:	29 f4       	brne	.+10     	; 0x1210 <itoa+0x1c>
    1206:	97 fb       	bst	r25, 7
    1208:	1e f4       	brtc	.+6      	; 0x1210 <itoa+0x1c>
    120a:	90 95       	com	r25
    120c:	81 95       	neg	r24
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	64 2f       	mov	r22, r20
    1212:	77 27       	eor	r23, r23
    1214:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__udivmodhi4>
    1218:	80 5d       	subi	r24, 0xD0	; 208
    121a:	8a 33       	cpi	r24, 0x3A	; 58
    121c:	0c f0       	brlt	.+2      	; 0x1220 <itoa+0x2c>
    121e:	89 5d       	subi	r24, 0xD9	; 217
    1220:	81 93       	st	Z+, r24
    1222:	cb 01       	movw	r24, r22
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	a1 f7       	brne	.-24     	; 0x1210 <itoa+0x1c>
    1228:	16 f4       	brtc	.+4      	; 0x122e <itoa+0x3a>
    122a:	5d e2       	ldi	r21, 0x2D	; 45
    122c:	51 93       	st	Z+, r21
    122e:	10 82       	st	Z, r1
    1230:	c9 01       	movw	r24, r18
    1232:	0c 94 23 09 	jmp	0x1246	; 0x1246 <strrev>

00001236 <__mulhi_const_10>:
    1236:	7a e0       	ldi	r23, 0x0A	; 10
    1238:	97 9f       	mul	r25, r23
    123a:	90 2d       	mov	r25, r0
    123c:	87 9f       	mul	r24, r23
    123e:	80 2d       	mov	r24, r0
    1240:	91 0d       	add	r25, r1
    1242:	11 24       	eor	r1, r1
    1244:	08 95       	ret

00001246 <strrev>:
    1246:	dc 01       	movw	r26, r24
    1248:	fc 01       	movw	r30, r24
    124a:	67 2f       	mov	r22, r23
    124c:	71 91       	ld	r23, Z+
    124e:	77 23       	and	r23, r23
    1250:	e1 f7       	brne	.-8      	; 0x124a <strrev+0x4>
    1252:	32 97       	sbiw	r30, 0x02	; 2
    1254:	04 c0       	rjmp	.+8      	; 0x125e <strrev+0x18>
    1256:	7c 91       	ld	r23, X
    1258:	6d 93       	st	X+, r22
    125a:	70 83       	st	Z, r23
    125c:	62 91       	ld	r22, -Z
    125e:	ae 17       	cp	r26, r30
    1260:	bf 07       	cpc	r27, r31
    1262:	c8 f3       	brcs	.-14     	; 0x1256 <strrev+0x10>
    1264:	08 95       	ret

00001266 <_exit>:
    1266:	f8 94       	cli

00001268 <__stop_program>:
    1268:	ff cf       	rjmp	.-2      	; 0x1268 <__stop_program>
